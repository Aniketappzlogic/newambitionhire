{"name": "test_registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00A5C203+27395]\n\t(No symbol) [0x009F3E04]\n\t(No symbol) [0x008F1B7F]\n\t(No symbol) [0x008CE483]\n\t(No symbol) [0x0095A06F]\n\t(No symbol) [0x0096C3D6]\n\t(No symbol) [0x00953736]\n\t(No symbol) [0x00927541]\n\t(No symbol) [0x009280BD]\n\tGetHandleVerifier [0x00D13AB3+2876339]\n\tGetHandleVerifier [0x00D67F7D+3221629]\n\tGetHandleVerifier [0x00ADD674+556916]\n\tGetHandleVerifier [0x00AE478C+585868]\n\t(No symbol) [0x009FCE44]\n\t(No symbol) [0x009F9858]\n\t(No symbol) [0x009F99F7]\n\t(No symbol) [0x009EBF4E]\n\tBaseThreadInitThunk [0x7703FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"8e05e47303c06388246b8fdb2d6b34f5\")>, authenticated_user = None\n\n    @pytest.mark.registration\n    def test_registration(env, driver,authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        registration = Registration(driver)\n        driver.implicitly_wait(5)\n        registration.registartion_name_btn.send_keys('MRIDUL')\n        driver.implicitly_wait(2)\n        registration.email_btn.send_keys('mridulsaxena@gmail.com')\n        registration.phoneno_btn.send_keys('7503078450')\n        registration.location_btn.send_keys('Uttar Pradesh: Noida')\n        driver.implicitly_wait(10)\n        registration.condition_btn.click()\n        time.sleep(2)\n        registration.sendotp_btn.click()\n        time.sleep(5)\n        original_window = driver.current_window_handle\n        driver.execute_script(\"window.open('https://mail.google.com', '_blank');\")\n        #WebDriverWait(driver, 10).until(EC.new_window_is_opened)\n        driver.switch_to.window(driver.window_handles[-1])\n        time.sleep(8)\n        registration.gmail_btn.send_keys('mridulsaxena016@gmail.com')\n        driver.implicitly_wait(5)\n        registration.gmailnext_btn.click()\n        driver.implicitly_wait(2)\n        registration.gmail_enterpasswordbtn.send_keys('faze sefc rwdi pniw')\n        time.sleep(8)\n>       registration.gmailnext_btn.click()\n\ntests\\candidate_test\\registration_test.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\registration.py:50: in gmailnext_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E26E998E30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00A5C203+27395]\nE       \t(No symbol) [0x009F3E04]\nE       \t(No symbol) [0x008F1B7F]\nE       \t(No symbol) [0x008CE483]\nE       \t(No symbol) [0x0095A06F]\nE       \t(No symbol) [0x0096C3D6]\nE       \t(No symbol) [0x00953736]\nE       \t(No symbol) [0x00927541]\nE       \t(No symbol) [0x009280BD]\nE       \tGetHandleVerifier [0x00D13AB3+2876339]\nE       \tGetHandleVerifier [0x00D67F7D+3221629]\nE       \tGetHandleVerifier [0x00ADD674+556916]\nE       \tGetHandleVerifier [0x00AE478C+585868]\nE       \t(No symbol) [0x009FCE44]\nE       \t(No symbol) [0x009F9858]\nE       \t(No symbol) [0x009F99F7]\nE       \t(No symbol) [0x009EBF4E]\nE       \tBaseThreadInitThunk [0x7703FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "beb0fa99-f618-4145-b4df-335d5c34549c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "0975d464-db33-47f9-befe-108741e19e6a-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "b05f51b8-5d93-413c-8f7b-d72491fbe07c-attachment.txt", "type": "text/plain"}], "start": 1721735224341, "stop": 1721735250934, "uuid": "071c1fae-78a7-46eb-8d77-bc4110ae70e0", "historyId": "b91bc7f231e3740fe6c0b8995a99c077", "testCaseId": "b91bc7f231e3740fe6c0b8995a99c077", "fullName": "tests.candidate_test.registration_test#test_registration", "labels": [{"name": "tag", "value": "registration"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "registration_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "32072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.registration_test"}]}