{"name": "test_jobs_page", "status": "broken", "statusDetails": {"message": "TypeError: selenium.webdriver.remote.webdriver.WebDriver.find_element() argument after * must be an iterable, not type", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7df79d66e938dc5f6601a9ee90f12186\")>, authenticated_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.jobs_page\n    def test_jobs_page(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiter_login = Loginrecruiter(driver)\n        recruiter_login.username_btn.send_keys('inderjeetkmcs@gmail.com')\n        recruiter_login.password_btn.send_keys('123')\n        logging.info(f\"Password entered\")\n    \n        # recruiter_login.hidepassword_btn.click()\n        # logging.info(f\"hide passwrd btn clicked\")\n    \n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n        )\n        recruiter_login.login_btn.click()\n        logging.info(f\"login btn clicked\")\n        #time.sleep(5)\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n        )\n    \n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        logging.info(f\"jobs btn clicked\")\n    \n    \n        # activebtn = Jobs(driver)\n        # activebtn.active_btn.click()\n        # logging.info(f\"active btn clicked\")\n        #\n        # draftsbtn = Jobs(driver)\n        # draftsbtn.drafts_btn.click()\n        #\n        # inactivebtn = Jobs(driver)\n        # inactivebtn.inactive_btn.click()\n        # logging.info(f\"inactive btn clicked\")\n        #\n        # sortby_btn = Jobs(driver)\n        # sortby_btn.Sortby.click()\n        #\n        # last2week = Jobs(driver)\n        # last2week.last2week.click()\n        #\n        # searchtab = Jobs(driver)\n        # searchtab.search_tab.send_keys('3rd July Testing')\n        #\n        # detailsbtn = Jobs(driver)\n        # detailsbtn.details_btn.click()\n        #\n        # candidatesbtn = Jobs(driver)\n        # candidatesbtn.candidates_btn.click()\n        # logging.info(f\"candidate btn clicked\")\n        # #---------------------------------------------\n        #\n        #\n        # # WebDriverWait(driver, 3).until(\n        # #     EC.element_to_be_clickable((By.CSS_SELECTOR, \"#input-0\"))\n        # # )\n        # # candidatecheckbox = Jobs(driver)\n        # # candidatecheckbox.candidates_checkbox.click()\n        # #-------------------------------------------------\n        #\n        # Settings = Jobs(driver)\n        # Settings.Settings_btn.click()\n        #\n        # jobworkflow = Jobs(driver)\n        # jobworkflow.Job_Workflow_btn.click()\n        #\n        # Proctoringbtn = Jobs(driver)\n        # Proctoringbtn.Proctoring_btn.click()\n        #\n        # Cut_off = Jobs(driver)\n        # Cut_off.Cutoff.click()\n        #\n        # Applicationform = Jobs(driver)\n        # Applicationform.Application_Form.click()\n        #\n        # Languagebtn = Jobs(driver)\n        # Languagebtn.Language_btn.click()\n        # logging.info(f\"Lang btn Created\")\n        #\n        # Savebtn = Jobs(driver)\n        # Savebtn.Save_btn.click()\n        # logging.info(f\"save btn clicked\")\n        #\n        #\n        # jobs_page = Jobs(driver)\n        # jobs_page.jobs_btn.click()\n    \n    \n    #CREATE JOB\n    \n        # createjob = Jobs(driver)\n        # createjob.Create_Job.click()\n        # logging.info(f\"create job Clicked\")\n        #\n        # jobtitle = Jobs(driver)\n        # jobtitle.Job_Title.send_keys('Automated Job')\n        #\n        # notificationtitle = Jobs(driver)\n        # notificationtitle.Notification_Title.send_keys(\"Automated\")\n        #\n        # JobDescription = Jobs(driver)\n        # JobDescription.Job_Description.send_keys('automated')\n        #\n        # department = Jobs(driver)\n        # department.Department.click()\n        # department.Department_selector.click()\n        #\n        # industry = Jobs(driver)\n        # industry.Industry.click()\n        # industry.Industry_selector.click()\n        #\n        # Employmenttype = Jobs(driver)\n        # Employmenttype.Employment_Type.click()\n        # Employmenttype.Employmenttype_selector.click()\n        #\n        # WorkplaceType = Jobs(driver)\n        # WorkplaceType.Workplace_Type.click()\n        # WorkplaceType.Workplace_Type_Selector.click()\n        #\n        # WorkExperience = Jobs(driver)\n        # WorkExperience.Work_Experience.click()\n        # WorkExperience.Workplace_Experience_Selector.click()\n        #\n        # location = Jobs(driver)\n        # location.Location.send_keys('Gurgao')\n        # location.Location_selector.click()\n        #\n        # MinSalary = Jobs(driver)\n        # MinSalary.Min_Salary.send_keys('5')\n        #\n        # MaxSalary = Jobs(driver)\n        # MaxSalary.Max_Salary.send_keys('7')\n    \n        #NEXT SECTION\n        # Nextbtn = Jobs(driver)\n        # Nextbtn.Next_btn.click()\n        #\n        # AssessmentCompletion = Jobs(driver)\n        # AssessmentCompletion.Assessment_Completion_toggle.click()\n        #\n        # OneSitting = Jobs(driver)\n        # OneSitting.OneSitting_toggle.click()\n        #\n        # Nextbutn = Jobs(driver)\n        # Nextbutn.Next_butn.click()\n    \n    \n        #JOB SETTINGS - JOB WORKFLOW PAGE\n    \n        # AssessmentToggle = Jobs(driver)\n        # AssessmentToggle.Assessment_toggle.click()\n    \n        # CTQToggle = Jobs(driver)\n        # CTQToggle.CTQ_Toggle.click()\n        #\n        # FunctionalToggle = Jobs(driver)\n        # FunctionalToggle.Functional_Toggle.click()\n        #\n        # EnglishToggle = Jobs(driver)\n        # EnglishToggle.English_Toggle.click()\n    \n        # MultilingualToggle = Jobs(driver)\n        # MultilingualToggle.Multilingual_Toggle.click()\n    \n        # PsychometricToggle = Jobs(driver)\n        # PsychometricToggle.Psychometric_Toggle.click()\n        #\n        # AlgoriseToggle = Jobs(driver)\n        # AlgoriseToggle.Algorise_Toggle.click()\n        #\n        # ExcelToggle = Jobs(driver)\n        # ExcelToggle.Excel_Toggle.click()\n        #\n        # OnewayInterview = Jobs(driver)\n        # OnewayInterview.OneWayInterview_Toggle.click()\n    \n        # ResultToggle = Jobs(driver)\n        # ResultToggle.Result_Toggle.click()\n        #\n        # Nexxt = Jobs(driver)\n        # Nexxt.Next_btn_to_Proctoring.click()\n    \n        #PROCTORING PAGE\n        # ProctoringToggle = Jobs(driver)\n        # ProctoringToggle.Proctoring_Toggle.click() #comment it out if want ot be proctoring disabled\n        #\n        # AntiCheatToggle = Jobs(driver)\n        # AntiCheatToggle.AntiCheat_Toggle.click()\n        #\n        # NextToCutoff = Jobs(driver)\n        # NextToCutoff.Next_to_Cutoff.click()\n    \n    \n        #NEXT TO LANGUAGE\n        # NextToLang = Jobs(driver)\n        # NextToLang.Next_to_Lang.click()\n        # logging.info(f\"next to lang Clicked\")\n        #\n        # time.sleep(2)\n    \n    \n        # NextToAppForm = Jobs(driver)\n        # NextToAppForm.Next_to_AppForm.click()\n        # logging.info(f\"app form Clicked\")\n        #\n        # time.sleep(2)\n        #\n        # SaveDraft = Jobs(driver)\n        # SaveDraft.Save_Draft.click()\n        # logging.info(f\"Job Created\")\n        #\n        # ViewJob = Jobs(driver)\n        # ViewJob.View_Job.click()\n        # logging.info(f\"View Job Clicked\")\n        #\n        # jobs_page = Jobs(driver)\n        # jobs_page.jobs_btn.click()\n        # logging.info(f\"jobs btn clicked\")\n    \n        inactivebtn = Jobs(driver)\n        inactivebtn.inactive_btn.click()\n        logging.info(f\"inactive btn clicked\")\n    \n        searchtab = Jobs(driver)\n        searchtab.search_tab.send_keys('Automated Job')\n    \n        Options = Jobs(driver)\n        Options.Options.double_click()\n    \n        DuplicateJob = Jobs(driver)\n>       DuplicateJob.Duplicate_Job.click()\n\ntests\\recruiter_test\\Jobs_test.py:254: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage_Recruiter\\Jobs_page.py:338: in Duplicate_Job\n    return BaseElement(driver=self.driver, locator=Locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7df79d66e938dc5f6601a9ee90f12186\")>\n\n    def _predicate(driver: WebDriverOrWebElement):\n        try:\n>           return _element_if_visible(driver.find_element(*locator))\nE           TypeError: selenium.webdriver.remote.webdriver.WebDriver.find_element() argument after * must be an iterable, not type\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: TypeError"}, "attachments": [{"name": "log", "source": "2a532faf-495e-4e2d-9810-c1efcda7021e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7b5a0b59-27c5-4e69-a112-f3009a0ff57e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "69ba8f91-6a3b-4b03-9c57-4c8520a9fd9b-attachment.txt", "type": "text/plain"}], "start": 1738566537796, "stop": 1738566550698, "uuid": "a6f680f9-298b-4aad-adc3-91e8500520d4", "historyId": "9052ef2b0d9e76791ffa006f9a881f25", "testCaseId": "9052ef2b0d9e76791ffa006f9a881f25", "fullName": "tests.recruiter_test.Jobs_test#test_jobs_page", "labels": [{"name": "tag", "value": "jobs_page"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Jobs_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "1860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Jobs_test"}]}