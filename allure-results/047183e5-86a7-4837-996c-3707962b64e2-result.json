{"name": "test_jobs_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <th class=\"v-data-table__td v-data-table-column--no-padding v-data-table-column--align-start v-data-table__th\" colspan=\"1\" rowspan=\"1\" style=\"width: 48px;\">...</th> is not clickable at point (340, 188). Other element would receive the click: <div class=\"fixed z-[100] inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\" style=\"--54111282: rgba(244, 7, 120, 0.04); --02743f37: #F40778;\">...</div>\n  (Session info: chrome=132.0.6834.160)\nStacktrace:\n\tGetHandleVerifier [0x010F74A3+25091]\n\t(No symbol) [0x0107DC04]\n\t(No symbol) [0x00F5B373]\n\t(No symbol) [0x00FA54B8]\n\t(No symbol) [0x00FA38C4]\n\t(No symbol) [0x00FA1467]\n\t(No symbol) [0x00FA076A]\n\t(No symbol) [0x00F953A5]\n\t(No symbol) [0x00FC1F0C]\n\t(No symbol) [0x00F94E44]\n\t(No symbol) [0x00FC21A4]\n\t(No symbol) [0x00FDB49E]\n\t(No symbol) [0x00FC1CA6]\n\t(No symbol) [0x00F931D5]\n\t(No symbol) [0x00F9435D]\n\tGetHandleVerifier [0x013F07C3+3142947]\n\tGetHandleVerifier [0x01401A2B+3213195]\n\tGetHandleVerifier [0x013FC412+3191154]\n\tGetHandleVerifier [0x01198720+685184]\n\t(No symbol) [0x01086E1D]\n\t(No symbol) [0x01083E18]\n\t(No symbol) [0x01083FB6]\n\t(No symbol) [0x010766F0]\n\tBaseThreadInitThunk [0x7610FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ebd9fe9efba72467b8fd7aad0b8d65a7\")>, authenticated_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.candidates_page\n    def test_jobs_page(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiter_login = Loginrecruiter(driver)\n        recruiter_login.username_btn.send_keys('inderjeetkmcs@gmail.com')\n        recruiter_login.password_btn.send_keys('123')\n        logging.info(f\"Password entered\")\n    \n        # recruiter_login.hidepassword_btn.click()\n        # logging.info(f\"hide passwrd btn clicked\")\n    \n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n        )\n        recruiter_login.login_btn.click()\n        logging.info(f\"login btn clicked\")\n        #time.sleep(5)\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n        )\n        candidate_page = Candidates(driver)\n        candidate_page.candidates_btn.click()\n        logging.info(f\"candidates btn clicked\")\n    \n        Sortby = Candidates(driver)\n        Sortby.Sortby.click()\n    \n        Last_2week = Candidates(driver)\n        Last_2week.last2week.click()\n    \n        time.sleep(3)\n    \n        Filters = Candidates(driver)\n        Filters.Filters.click()\n    \n        StagesCTQ = Candidates(driver)\n        StagesCTQ.Stages_CTQ.click()\n        time.sleep(1)\n        StagesCTQ.Stages_CTQ.click()\n        logging.info(f\"ctq btn clicked\")\n    \n        StagesFunctional = Candidates(driver)\n        StagesFunctional.Stages_Functional.click()\n        time.sleep(1)\n        StagesFunctional.Stages_Functional.click()\n        logging.info(f\"func btn clicked\")\n    \n        StagesFunctional = Candidates(driver)\n        StagesFunctional.Stages_English.click()\n        time.sleep(1)\n        StagesFunctional.Stages_English.click()\n        logging.info(f\"english btn clicked\")\n    \n        StagesFunctional = Candidates(driver)\n        StagesFunctional.Stages_Psychometric.click()\n        time.sleep(1)\n        StagesFunctional.Stages_Psychometric.click()\n        logging.info(f\"candidates btn clicked\")\n    \n        StagesFunctional = Candidates(driver)\n        StagesFunctional.Stages_InReview.click()\n        time.sleep(1)\n        StagesFunctional.Stages_InReview.click()\n        logging.info(f\"in-review btn clicked\")\n    \n        ProctoringStatus = Candidates(driver)\n        ProctoringStatus.Proctoring_status.click()\n    \n        Pass = Candidates(driver)\n        Pass.Passed.click()\n        time.sleep(1)\n        Pass.Passed.click()\n    \n        Fail = Candidates(driver)\n        Fail.Failed.click()\n        time.sleep(1)\n        Fail.Failed.click()\n    \n        Lastactive = Candidates(driver)\n        Lastactive.Last_active.click()\n    \n        Filters = Candidates(driver)\n        Filters.Filters.click()\n    \n        SearchCandidate = Candidates(driver)\n        SearchCandidate.Search_Candidate.send_keys('Aniket')\n    \n        Action  = Candidates(driver)\n        Action.Action_btn.click()\n    \n        DownloadScorecard = Candidates(driver)\n        DownloadScorecard.Download_Scorecard.click()\n        logging.info(f\"in-review btn clicked\")\n    \n        Checkbox = Candidates(driver)\n>       Checkbox.Candidate_Ceckbox.click()\n\ntests\\recruiter_test\\Candidates_test.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_elements.py:77: in click\n    element.click()\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020034139D30>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <th class=\"v-data-table__td v-data-table-column--no-padding v-data-table-column--align-start v-data-table__th\" colspan=\"1\" rowspan=\"1\" style=\"width: 48px;\">...</th> is not clickable at point (340, 188). Other element would receive the click: <div class=\"fixed z-[100] inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\" style=\"--54111282: rgba(244, 7, 120, 0.04); --02743f37: #F40778;\">...</div>\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010F74A3+25091]\nE       \t(No symbol) [0x0107DC04]\nE       \t(No symbol) [0x00F5B373]\nE       \t(No symbol) [0x00FA54B8]\nE       \t(No symbol) [0x00FA38C4]\nE       \t(No symbol) [0x00FA1467]\nE       \t(No symbol) [0x00FA076A]\nE       \t(No symbol) [0x00F953A5]\nE       \t(No symbol) [0x00FC1F0C]\nE       \t(No symbol) [0x00F94E44]\nE       \t(No symbol) [0x00FC21A4]\nE       \t(No symbol) [0x00FDB49E]\nE       \t(No symbol) [0x00FC1CA6]\nE       \t(No symbol) [0x00F931D5]\nE       \t(No symbol) [0x00F9435D]\nE       \tGetHandleVerifier [0x013F07C3+3142947]\nE       \tGetHandleVerifier [0x01401A2B+3213195]\nE       \tGetHandleVerifier [0x013FC412+3191154]\nE       \tGetHandleVerifier [0x01198720+685184]\nE       \t(No symbol) [0x01086E1D]\nE       \t(No symbol) [0x01083E18]\nE       \t(No symbol) [0x01083FB6]\nE       \t(No symbol) [0x010766F0]\nE       \tBaseThreadInitThunk [0x7610FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "7de1153b-c456-4366-a78d-37bd43f9b899-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "94919840-6577-4594-8cf7-d157382f64d9-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "fa5e5e89-86dc-4125-9042-c9ec441d0d23-attachment.txt", "type": "text/plain"}], "start": 1738668625272, "stop": 1738668644917, "uuid": "2c1d2e79-6901-4baa-96d1-3e423060d2a0", "historyId": "a07d543f70715916bb5741f0811420af", "testCaseId": "a07d543f70715916bb5741f0811420af", "fullName": "tests.recruiter_test.Candidates_test#test_jobs_page", "labels": [{"name": "tag", "value": "candidates_page"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Candidates_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "8156-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Candidates_test"}]}