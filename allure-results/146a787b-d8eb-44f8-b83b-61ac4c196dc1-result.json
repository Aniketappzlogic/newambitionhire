{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"text-sm font-medium leading-[21px] whitespace-nowrap text-center\">...</span> is not clickable at point (635, 479). Other element would receive the click: <vite-error-overlay></vite-error-overlay>\n  (Session info: chrome=126.0.6478.128)\nStacktrace:\n\tGetHandleVerifier [0x00C1C203+27395]\n\t(No symbol) [0x00BB3E04]\n\t(No symbol) [0x00AB1B7F]\n\t(No symbol) [0x00AF8C22]\n\t(No symbol) [0x00AF6FA8]\n\t(No symbol) [0x00AF4E2B]\n\t(No symbol) [0x00AF43D7]\n\t(No symbol) [0x00AE918F]\n\t(No symbol) [0x00B1399C]\n\t(No symbol) [0x00AE8C15]\n\t(No symbol) [0x00B13C34]\n\t(No symbol) [0x00B2CB24]\n\t(No symbol) [0x00B13736]\n\t(No symbol) [0x00AE7541]\n\t(No symbol) [0x00AE80BD]\n\tGetHandleVerifier [0x00ED3AB3+2876339]\n\tGetHandleVerifier [0x00F27F7D+3221629]\n\tGetHandleVerifier [0x00C9D674+556916]\n\tGetHandleVerifier [0x00CA478C+585868]\n\t(No symbol) [0x00BBCE44]\n\t(No symbol) [0x00BB9858]\n\t(No symbol) [0x00BB99F7]\n\t(No symbol) [0x00BABF4E]\n\tBaseThreadInitThunk [0x75B2FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"10d5bb5683f1f949cd6205ca9427cdd8\")>, authenticated_user = None\n\n    @pytest.mark.login\n    def test_login(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        Pagelogin = Login(driver)\n        Pagelogin.login_btn.click()\n        # driver.implicitly_wait(2)\n        time.sleep(3)\n        Pagelogin.name_btn.send_keys('Mridul')\n        Pagelogin.phonenumber_btn.send_keys('7503078450')\n        Pagelogin.sendotp_btn.click()\n        time.sleep(30)\n>       Pagelogin.submitotp_btn.click()\n\ntests\\candidate_test\\login_test.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_elements.py:77: in click\n    element.click()\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018B22D9BFE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"text-sm font-medium leading-[21px] whitespace-nowrap text-center\">...</span> is not clickable at point (635, 479). Other element would receive the click: <vite-error-overlay></vite-error-overlay>\nE         (Session info: chrome=126.0.6478.128)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00C1C203+27395]\nE       \t(No symbol) [0x00BB3E04]\nE       \t(No symbol) [0x00AB1B7F]\nE       \t(No symbol) [0x00AF8C22]\nE       \t(No symbol) [0x00AF6FA8]\nE       \t(No symbol) [0x00AF4E2B]\nE       \t(No symbol) [0x00AF43D7]\nE       \t(No symbol) [0x00AE918F]\nE       \t(No symbol) [0x00B1399C]\nE       \t(No symbol) [0x00AE8C15]\nE       \t(No symbol) [0x00B13C34]\nE       \t(No symbol) [0x00B2CB24]\nE       \t(No symbol) [0x00B13736]\nE       \t(No symbol) [0x00AE7541]\nE       \t(No symbol) [0x00AE80BD]\nE       \tGetHandleVerifier [0x00ED3AB3+2876339]\nE       \tGetHandleVerifier [0x00F27F7D+3221629]\nE       \tGetHandleVerifier [0x00C9D674+556916]\nE       \tGetHandleVerifier [0x00CA478C+585868]\nE       \t(No symbol) [0x00BBCE44]\nE       \t(No symbol) [0x00BB9858]\nE       \t(No symbol) [0x00BB99F7]\nE       \t(No symbol) [0x00BABF4E]\nE       \tBaseThreadInitThunk [0x75B2FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "33a9100d-bb81-4cfc-a939-08e20df5e9fd-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "11a0e967-fa33-4c86-a05d-cc501ac7164c-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "b6aef5d6-3df1-453f-8d74-172a6a886ee3-attachment.txt", "type": "text/plain"}], "start": 1721974124220, "stop": 1721974158935, "uuid": "83112b12-7a6c-47ed-a098-f94780f7a170", "historyId": "86b1e9db321c90658f175e0a246d262f", "testCaseId": "86b1e9db321c90658f175e0a246d262f", "fullName": "tests.candidate_test.login_test#test_login", "labels": [{"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "18732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.login_test"}]}