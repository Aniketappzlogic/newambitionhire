{"name": "test_invalid_password_login_recruiter", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=135.0.7049.115)\nStacktrace:\n\tGetHandleVerifier [0x00CBD363+60275]\n\tGetHandleVerifier [0x00CBD3A4+60340]\n\t(No symbol) [0x00AF056E]\n\t(No symbol) [0x00B330A9]\n\t(No symbol) [0x00B31746]\n\t(No symbol) [0x00B5D08C]\n\t(No symbol) [0x00B2DCF4]\n\t(No symbol) [0x00B5D304]\n\t(No symbol) [0x00B7E6EB]\n\t(No symbol) [0x00B5CE86]\n\t(No symbol) [0x00B2C623]\n\t(No symbol) [0x00B2D474]\n\tGetHandleVerifier [0x00F08FE3+2467827]\n\tGetHandleVerifier [0x00F045E6+2448886]\n\tGetHandleVerifier [0x00F1F80C+2560028]\n\tGetHandleVerifier [0x00CD3DF5+153093]\n\tGetHandleVerifier [0x00CDA3BD+179149]\n\tGetHandleVerifier [0x00CC4BB8+91080]\n\tGetHandleVerifier [0x00CC4D60+91504]\n\tGetHandleVerifier [0x00CAFA10+4640]\n\tBaseThreadInitThunk [0x76E3FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ca32ad9ba75bebc5d431375b9f4da083\")>, recruiter_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.regression_recruiter_loginpage\n    @pytest.mark.invalid_password_login_recruiter\n    def test_invalid_password_login_recruiter(env, driver, recruiter_user):\n        logging.info(f\"environment -> {env}\")\n        login = recruiter_user\n        recruiterlogin = Loginrecruiter(driver)\n>       recruiterlogin.username_btn.send_keys('inderjeetkmcs@gmail.com')\n\ntests\\recruiter_test\\login_test.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_elements.py:82: in send_keys\n    self.web_element.send_keys(txt)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000270BA2A2210>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=135.0.7049.115)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00CBD363+60275]\nE       \tGetHandleVerifier [0x00CBD3A4+60340]\nE       \t(No symbol) [0x00AF056E]\nE       \t(No symbol) [0x00B330A9]\nE       \t(No symbol) [0x00B31746]\nE       \t(No symbol) [0x00B5D08C]\nE       \t(No symbol) [0x00B2DCF4]\nE       \t(No symbol) [0x00B5D304]\nE       \t(No symbol) [0x00B7E6EB]\nE       \t(No symbol) [0x00B5CE86]\nE       \t(No symbol) [0x00B2C623]\nE       \t(No symbol) [0x00B2D474]\nE       \tGetHandleVerifier [0x00F08FE3+2467827]\nE       \tGetHandleVerifier [0x00F045E6+2448886]\nE       \tGetHandleVerifier [0x00F1F80C+2560028]\nE       \tGetHandleVerifier [0x00CD3DF5+153093]\nE       \tGetHandleVerifier [0x00CDA3BD+179149]\nE       \tGetHandleVerifier [0x00CC4BB8+91080]\nE       \tGetHandleVerifier [0x00CC4D60+91504]\nE       \tGetHandleVerifier [0x00CAFA10+4640]\nE       \tBaseThreadInitThunk [0x76E3FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "ff894f19-fd71-4454-b36e-1509b0c4aa25-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "5028ca1b-fb48-4626-838c-c63dfb87e4ad-attachment.txt", "type": "text/plain"}], "start": 1745958728976, "stop": 1745958729137, "uuid": "f5e635b1-75b1-4f6f-9cc6-b3750e6aaafb", "historyId": "804279eb6a0605db1ef1be25493774d6", "testCaseId": "804279eb6a0605db1ef1be25493774d6", "fullName": "tests.recruiter_test.login_test#test_invalid_password_login_recruiter", "labels": [{"name": "tag", "value": "invalid_password_login_recruiter"}, {"name": "tag", "value": "regression_recruiter_loginpage"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "8484-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.login_test"}]}