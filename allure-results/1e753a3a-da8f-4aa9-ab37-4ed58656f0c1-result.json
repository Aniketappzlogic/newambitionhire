{"name": "test_userprofile", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b644b503408b79a390c7d220716d4fb5\")>, authenticated_user = None\n\n    @pytest.mark.userprofile\n    def test_userprofile(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        userinfo = Userprofile(driver)\n        Pagelogin = Login(driver)\n        Pagelogin.login_btn.click()\n        # driver.implicitly_wait(2)\n        time.sleep(3)\n        Pagelogin.name_btn.send_keys('Mridul')\n        Pagelogin.phonenumber_btn.send_keys('7503078450')\n        Pagelogin.sendotp_btn.click()\n        time.sleep(5)\n        Pagelogin.Sendingotp_text.send_keys('000000')\n        Pagelogin.submitotp_btn.click()\n        time.sleep(2)\n>       userinfo.profileicon_btn.click()\n\ntests\\candidate_test\\Userprofile_test.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\Userprofile.py:11: in profileicon_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b644b503408b79a390c7d220716d4fb5\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000025F8647AC00>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "7c5f42a9-bdfe-47a2-8d44-6d15fabf33c8-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "81ab311f-a7af-45ed-92ed-16d1dadf4aad-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "54a4a41a-ccb5-4718-a629-923992f2a77b-attachment.txt", "type": "text/plain"}], "start": 1722247991569, "stop": 1722248032656, "uuid": "b1961df2-e0db-4706-ab10-c0ff5f8f69fa", "historyId": "c80e9144af3048cdfe60c760d4c51042", "testCaseId": "c80e9144af3048cdfe60c760d4c51042", "fullName": "tests.candidate_test.Userprofile_test#test_userprofile", "labels": [{"name": "tag", "value": "userprofile"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "Userprofile_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "7724-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.Userprofile_test"}]}