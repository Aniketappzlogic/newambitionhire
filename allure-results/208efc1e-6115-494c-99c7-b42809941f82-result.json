{"name": "test_viewuploadedresume", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: unable to send message to renderer\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=126.0.6478.128)\nStacktrace:\n\tGetHandleVerifier [0x00F9C203+27395]\n\t(No symbol) [0x00F33E04]\n\t(No symbol) [0x00E31B7F]\n\t(No symbol) [0x00E1CE9C]\n\t(No symbol) [0x00E1CE26]\n\t(No symbol) [0x00E1B9F9]\n\t(No symbol) [0x00E1C3CD]\n\t(No symbol) [0x00E34E0F]\n\t(No symbol) [0x00E355D2]\n\t(No symbol) [0x00E388F8]\n\t(No symbol) [0x00E38970]\n\t(No symbol) [0x00E728A7]\n\t(No symbol) [0x00E72D3B]\n\t(No symbol) [0x00EAEC82]\n\t(No symbol) [0x00E939E4]\n\t(No symbol) [0x00EACB24]\n\t(No symbol) [0x00E93736]\n\t(No symbol) [0x00E67541]\n\t(No symbol) [0x00E680BD]\n\tGetHandleVerifier [0x01253AB3+2876339]\n\tGetHandleVerifier [0x012A7F7D+3221629]\n\tGetHandleVerifier [0x0101D674+556916]\n\tGetHandleVerifier [0x0102478C+585868]\n\t(No symbol) [0x00F3CE44]\n\t(No symbol) [0x00F39858]\n\t(No symbol) [0x00F399F7]\n\t(No symbol) [0x00F2BF4E]\n\tBaseThreadInitThunk [0x75B2FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]", "trace": "env = 'dev', authenticated_user = None, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"178ee6f3b3d7bad166bce6184862aa1d\")>\n\n    @pytest.mark.viewuploadedresume\n    def test_viewuploadedresume(env, authenticated_user, driver):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        userinfo = Userprofile(driver)\n        Pagelogin = Login(driver)\n        # Pagelogin.login_btn.click()\n        # # driver.implicitly_wait(2)\n        # time.sleep(3)\n        # # Pagelogin.name_btn.send_keys('Mridul')\n        Pagelogin.phonenumber_btn.send_keys('7503078450')\n        Pagelogin.sendotp_btn.click()\n        time.sleep(5)\n        Pagelogin.Sendingotp_text.send_keys('000000')\n        Pagelogin.submitotp_btn.click()\n        time.sleep(2)\n        userinfo.profileicon_btn.click()\n        time.sleep(5)\n        userinfo.selectingprofileicon_btn.click()\n        time.sleep(5)\n        userinfo.edit_resume_btn.click()\n        time.sleep(5)\n>       userinfo.choose_Resume_from_device_btn.click()\n\ntests\\candidate_test\\Userprofile_test.py:338: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\Userprofile.py:192: in choose_Resume_from_device_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000156DC4D0B30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: unable to send message to renderer...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: unable to send message to renderer\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=126.0.6478.128)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00F9C203+27395]\nE       \t(No symbol) [0x00F33E04]\nE       \t(No symbol) [0x00E31B7F]\nE       \t(No symbol) [0x00E1CE9C]\nE       \t(No symbol) [0x00E1CE26]\nE       \t(No symbol) [0x00E1B9F9]\nE       \t(No symbol) [0x00E1C3CD]\nE       \t(No symbol) [0x00E34E0F]\nE       \t(No symbol) [0x00E355D2]\nE       \t(No symbol) [0x00E388F8]\nE       \t(No symbol) [0x00E38970]\nE       \t(No symbol) [0x00E728A7]\nE       \t(No symbol) [0x00E72D3B]\nE       \t(No symbol) [0x00EAEC82]\nE       \t(No symbol) [0x00E939E4]\nE       \t(No symbol) [0x00EACB24]\nE       \t(No symbol) [0x00E93736]\nE       \t(No symbol) [0x00E67541]\nE       \t(No symbol) [0x00E680BD]\nE       \tGetHandleVerifier [0x01253AB3+2876339]\nE       \tGetHandleVerifier [0x012A7F7D+3221629]\nE       \tGetHandleVerifier [0x0101D674+556916]\nE       \tGetHandleVerifier [0x0102478C+585868]\nE       \t(No symbol) [0x00F3CE44]\nE       \t(No symbol) [0x00F39858]\nE       \t(No symbol) [0x00F399F7]\nE       \t(No symbol) [0x00F2BF4E]\nE       \tBaseThreadInitThunk [0x75B2FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "1d5f427c-e835-4510-994b-6892c4e166c0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9c8227fe-2be0-4d27-aeb4-647b4b415df0-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "cba1e3ad-ddd7-43ee-aa0c-f78597fc23e7-attachment.txt", "type": "text/plain"}], "start": 1722852961811, "stop": 1722852994211, "uuid": "ab3fbfbf-55d3-43e4-ba23-15d87d9c2a81", "historyId": "f46c7698aa0c4ed36596e95443dc080a", "testCaseId": "f46c7698aa0c4ed36596e95443dc080a", "fullName": "tests.candidate_test.Userprofile_test#test_viewuploadedresume", "labels": [{"name": "tag", "value": "viewuploadedresume"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "Userprofile_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "9140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.Userprofile_test"}]}