{"name": "test_userprofile", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: May the browser didn't support or there is some errors.\nMessage: unexpected alert open: {Alert text : May the browser didn't support or there is some errors.}\n  (Session info: chrome=126.0.6478.128)\nStacktrace:\n\tGetHandleVerifier [0x00C0C203+27395]\n\t(No symbol) [0x00BA3E04]\n\t(No symbol) [0x00AA1B7F]\n\t(No symbol) [0x00B1D173]\n\t(No symbol) [0x00B03736]\n\t(No symbol) [0x00AD7541]\n\t(No symbol) [0x00AD80BD]\n\tGetHandleVerifier [0x00EC3AB3+2876339]\n\tGetHandleVerifier [0x00F17F7D+3221629]\n\tGetHandleVerifier [0x00C8D674+556916]\n\tGetHandleVerifier [0x00C9478C+585868]\n\t(No symbol) [0x00BACE44]\n\t(No symbol) [0x00BA9858]\n\t(No symbol) [0x00BA99F7]\n\t(No symbol) [0x00B9BF4E]\n\tBaseThreadInitThunk [0x75B2FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"aca5ab3085d01568a2bb27820096d550\")>, authenticated_user = None\n\n    @pytest.mark.userprofile\n    def test_userprofile(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        userinfo = Userprofile(driver)\n        Pagelogin = Login(driver)\n        Pagelogin.login_btn.click()\n        # driver.implicitly_wait(2)\n        time.sleep(3)\n        Pagelogin.name_btn.send_keys('Mridul')\n        Pagelogin.phonenumber_btn.send_keys('7503078450')\n        Pagelogin.sendotp_btn.click()\n        time.sleep(5)\n        Pagelogin.Sendingotp_text.send_keys('000000')\n        Pagelogin.submitotp_btn.click()\n        time.sleep(2)\n        userinfo.profileicon_btn.click()\n        time.sleep(1)\n        userinfo.selectingprofileicon_btn.click()\n        time.sleep(5)\n        userinfo.clickprofileimage_btn.click()\n        time.sleep(5)\n>       userinfo.takephoto_btn.click()\n\ntests\\candidate_test\\Userprofile_test.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\Userprofile.py:26: in takephoto_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000178D32B36B0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"May the browser didn\\'t support or there is some errors.\"},\"error\"...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: May the browser didn't support or there is some errors.\nE           Message: unexpected alert open: {Alert text : May the browser didn't support or there is some errors.}\nE             (Session info: chrome=126.0.6478.128)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x00C0C203+27395]\nE           \t(No symbol) [0x00BA3E04]\nE           \t(No symbol) [0x00AA1B7F]\nE           \t(No symbol) [0x00B1D173]\nE           \t(No symbol) [0x00B03736]\nE           \t(No symbol) [0x00AD7541]\nE           \t(No symbol) [0x00AD80BD]\nE           \tGetHandleVerifier [0x00EC3AB3+2876339]\nE           \tGetHandleVerifier [0x00F17F7D+3221629]\nE           \tGetHandleVerifier [0x00C8D674+556916]\nE           \tGetHandleVerifier [0x00C9478C+585868]\nE           \t(No symbol) [0x00BACE44]\nE           \t(No symbol) [0x00BA9858]\nE           \t(No symbol) [0x00BA99F7]\nE           \t(No symbol) [0x00B9BF4E]\nE           \tBaseThreadInitThunk [0x75B2FCC9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77AD80CE+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x77AD809E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "attachments": [{"name": "log", "source": "5b6bf4b6-bd00-4ecc-a1f3-79774546609b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "0e717bb9-3e74-4279-a235-e7dd217d4c91-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "78b99579-dbef-4570-ab3c-927acf204f61-attachment.txt", "type": "text/plain"}], "start": 1722320136481, "stop": 1722320158500, "uuid": "d978c4ea-5c13-4190-85f2-0b21a0132905", "historyId": "c80e9144af3048cdfe60c760d4c51042", "testCaseId": "c80e9144af3048cdfe60c760d4c51042", "fullName": "tests.candidate_test.Userprofile_test#test_userprofile", "labels": [{"name": "tag", "value": "userprofile"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "Userprofile_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "13204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.Userprofile_test"}]}