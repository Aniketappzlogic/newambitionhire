{"name": "test_jobs_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"916687d43c6f276bad5ec38d18135b17\")>, authenticated_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.jobs_page\n    def test_jobs_page(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiter_login = Loginrecruiter(driver)\n        recruiter_login.username_btn.send_keys('inderjeetkmcs@gmail.com')\n        recruiter_login.password_btn.send_keys('123')\n        logging.info(f\"Password entered\")\n    \n        # recruiter_login.hidepassword_btn.click()\n        # logging.info(f\"hide passwrd btn clicked\")\n    \n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n        )\n        recruiter_login.login_btn.click()\n        logging.info(f\"login btn clicked\")\n        #time.sleep(5)\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n        )\n    \n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        logging.info(f\"jobs btn clicked\")\n    \n    \n        activebtn = Jobs(driver)\n        activebtn.active_btn.click()\n        logging.info(f\"active btn clicked\")\n    \n        draftsbtn = Jobs(driver)\n        draftsbtn.drafts_btn.click()\n    \n        inactivebtn = Jobs(driver)\n        inactivebtn.inactive_btn.click()\n        logging.info(f\"inactive btn clicked\")\n    \n        sortby_btn = Jobs(driver)\n        sortby_btn.Sortby.click()\n    \n        last2week = Jobs(driver)\n        last2week.last2week.click()\n    \n        searchtab = Jobs(driver)\n        searchtab.search_tab.send_keys('3rd July Testing')\n    \n        detailsbtn = Jobs(driver)\n        detailsbtn.details_btn.click()\n    \n        candidatesbtn = Jobs(driver)\n        candidatesbtn.candidates_btn.click()\n    \n>       WebDriverWait(driver, 3).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"#input-0\"))\n        )\n\ntests\\recruiter_test\\Jobs_test.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"916687d43c6f276bad5ec38d18135b17\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x000001E7163A6F20>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "45239966-e467-45e4-b19d-d366bb5352b1-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "6fa47284-d153-4819-81d6-460b803412a3-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "078c2402-503f-470a-8be9-d07b0d001254-attachment.txt", "type": "text/plain"}], "start": 1738130052431, "stop": 1738130066168, "uuid": "53020352-fd10-425d-884c-c8a82d447bf7", "historyId": "9052ef2b0d9e76791ffa006f9a881f25", "testCaseId": "9052ef2b0d9e76791ffa006f9a881f25", "fullName": "tests.recruiter_test.Jobs_test#test_jobs_page", "labels": [{"name": "tag", "value": "jobs_page"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Jobs_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "20304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Jobs_test"}]}