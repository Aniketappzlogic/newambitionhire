{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=126.0.6478.127)\nStacktrace:\n\tGetHandleVerifier [0x00BCC203+27395]\n\t(No symbol) [0x00B63E04]\n\t(No symbol) [0x00A61B7F]\n\t(No symbol) [0x00ADD356]\n\t(No symbol) [0x00AC399C]\n\t(No symbol) [0x00ADCB24]\n\t(No symbol) [0x00AC3736]\n\t(No symbol) [0x00A97541]\n\t(No symbol) [0x00A980BD]\n\tGetHandleVerifier [0x00E83AB3+2876339]\n\tGetHandleVerifier [0x00ED7F7D+3221629]\n\tGetHandleVerifier [0x00C4D674+556916]\n\tGetHandleVerifier [0x00C5478C+585868]\n\t(No symbol) [0x00B6CE44]\n\t(No symbol) [0x00B69858]\n\t(No symbol) [0x00B699F7]\n\t(No symbol) [0x00B5BF4E]\n\tBaseThreadInitThunk [0x7703FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3b8ebdf20e7faa918333624f81f1cfb9\")>\n\n    @pytest.fixture(scope=\"module\")\n    def authenticated_user(env, driver):\n        \"\"\"Fixture to handle login and return the initial dashboard state.\"\"\"\n        login = Login(driver)\n        # Open the login page\n>       login.get(env)\n\nconftest.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\base_page.py:20: in get\n    self.driver.get(url)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000217E6195040>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'url\\' must be a string\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\nE         (Session info: chrome=126.0.6478.127)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00BCC203+27395]\nE       \t(No symbol) [0x00B63E04]\nE       \t(No symbol) [0x00A61B7F]\nE       \t(No symbol) [0x00ADD356]\nE       \t(No symbol) [0x00AC399C]\nE       \t(No symbol) [0x00ADCB24]\nE       \t(No symbol) [0x00AC3736]\nE       \t(No symbol) [0x00A97541]\nE       \t(No symbol) [0x00A980BD]\nE       \tGetHandleVerifier [0x00E83AB3+2876339]\nE       \tGetHandleVerifier [0x00ED7F7D+3221629]\nE       \tGetHandleVerifier [0x00C4D674+556916]\nE       \tGetHandleVerifier [0x00C5478C+585868]\nE       \t(No symbol) [0x00B6CE44]\nE       \t(No symbol) [0x00B69858]\nE       \t(No symbol) [0x00B699F7]\nE       \t(No symbol) [0x00B5BF4E]\nE       \tBaseThreadInitThunk [0x7703FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "1a13d483-47cc-4f99-9829-4bb1d41d754d-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "8383f360-3c30-4aa5-a370-af3206ef1868-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "95c0b673-661b-41be-930e-17440fc0dc32-attachment.txt", "type": "text/plain"}], "start": 1721632667249, "stop": 1721632667249, "uuid": "fae0c821-5b61-4b5d-adb2-8539eaae835a", "historyId": "86b1e9db321c90658f175e0a246d262f", "testCaseId": "86b1e9db321c90658f175e0a246d262f", "fullName": "tests.candidate_test.login_test#test_login", "labels": [{"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "24548-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.login_test"}]}