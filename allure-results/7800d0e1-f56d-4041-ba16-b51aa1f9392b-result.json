{"name": "test_jobs_page_result_toggle", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=135.0.7049.115)\nStacktrace:\n\tGetHandleVerifier [0x0121D363+60275]\n\tGetHandleVerifier [0x0121D3A4+60340]\n\t(No symbol) [0x010506F3]\n\t(No symbol) [0x0103FF20]\n\t(No symbol) [0x0105DDA2]\n\t(No symbol) [0x010C3D2F]\n\t(No symbol) [0x010DDFE9]\n\t(No symbol) [0x010BCE86]\n\t(No symbol) [0x0108C623]\n\t(No symbol) [0x0108D474]\n\tGetHandleVerifier [0x01468FE3+2467827]\n\tGetHandleVerifier [0x014645E6+2448886]\n\tGetHandleVerifier [0x0147F80C+2560028]\n\tGetHandleVerifier [0x01233DF5+153093]\n\tGetHandleVerifier [0x0123A3BD+179149]\n\tGetHandleVerifier [0x01224BB8+91080]\n\tGetHandleVerifier [0x01224D60+91504]\n\tGetHandleVerifier [0x0120FA10+4640]\n\tBaseThreadInitThunk [0x76E3FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf616d468793ee10330b07f483adb66e\")>, authenticated_user_recruiter = <Page_Recruiter.login.Loginrecruiter object at 0x0000020D09ABD850>\n\n    @pytest.mark.regression\n    @pytest.mark.jobs_page_result_toggle\n    def test_jobs_page_result_toggle(env, driver, authenticated_user_recruiter):\n        logging.info(f\"environment -> {env}\")\n        logging.info(f\"logged in\")\n        WebDriverWait(driver, 15).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"body > div:nth-child(1) > div:nth-child(3) > div:nth-child(3) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1)\"))\n        )\n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        assert_that(jobs_page.Create_Job.is_element_visible()).is_true()\n        jobs_page.Create_Job.click()\n    \n        jobs_page = Jobs(driver)\n>       jobs_page.jobs_btn.click()\n\ntests\\recruiter_test\\Jobs_test.py:1554: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage_Recruiter\\Jobs_page.py:16: in jobs_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020D09A971A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=135.0.7049.115)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0121D363+60275]\nE       \tGetHandleVerifier [0x0121D3A4+60340]\nE       \t(No symbol) [0x010506F3]\nE       \t(No symbol) [0x0103FF20]\nE       \t(No symbol) [0x0105DDA2]\nE       \t(No symbol) [0x010C3D2F]\nE       \t(No symbol) [0x010DDFE9]\nE       \t(No symbol) [0x010BCE86]\nE       \t(No symbol) [0x0108C623]\nE       \t(No symbol) [0x0108D474]\nE       \tGetHandleVerifier [0x01468FE3+2467827]\nE       \tGetHandleVerifier [0x014645E6+2448886]\nE       \tGetHandleVerifier [0x0147F80C+2560028]\nE       \tGetHandleVerifier [0x01233DF5+153093]\nE       \tGetHandleVerifier [0x0123A3BD+179149]\nE       \tGetHandleVerifier [0x01224BB8+91080]\nE       \tGetHandleVerifier [0x01224D60+91504]\nE       \tGetHandleVerifier [0x0120FA10+4640]\nE       \tBaseThreadInitThunk [0x76E3FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "d3a33ed7-7455-46f4-82ee-9f8c08d412bc-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "eb1fa003-0b7c-4f62-9466-cfb5ba5b4b29-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "80a33e67-e2ee-4277-bff0-7b9552ad0892-attachment.txt", "type": "text/plain"}], "start": 1745832159838, "stop": 1745832185994, "uuid": "43640e11-5c28-4594-b5ef-620d68809b9b", "historyId": "b01a3ed821c82fc3b1a12b072c6c627c", "testCaseId": "b01a3ed821c82fc3b1a12b072c6c627c", "fullName": "tests.recruiter_test.Jobs_test#test_jobs_page_result_toggle", "labels": [{"name": "tag", "value": "jobs_page_result_toggle"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Jobs_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "11020-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Jobs_test"}]}