{"name": "test_create_jobs", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=133.0.6943.143)\nStacktrace:\n\tGetHandleVerifier [0x00450B43+25139]\n\t(No symbol) [0x003E13F4]\n\t(No symbol) [0x002C04E3]\n\t(No symbol) [0x002AFE10]\n\t(No symbol) [0x002CD89A]\n\t(No symbol) [0x00333DDF]\n\t(No symbol) [0x0034E059]\n\t(No symbol) [0x0032CDC6]\n\t(No symbol) [0x002FBDE9]\n\t(No symbol) [0x002FD124]\n\tGetHandleVerifier [0x00754373+3185251]\n\tGetHandleVerifier [0x0077291A+3309578]\n\tGetHandleVerifier [0x0076CF42+3286578]\n\tGetHandleVerifier [0x004E7AE0+643536]\n\t(No symbol) [0x003EA20D]\n\t(No symbol) [0x003E70B8]\n\t(No symbol) [0x003E7257]\n\t(No symbol) [0x003D9E00]\n\tBaseThreadInitThunk [0x7716FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E682AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E6827E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7a3aab57308a2ae2c8db582d049f58c3\")>, authenticated_user_recruiter = <Page_Recruiter.login.Loginrecruiter object at 0x0000022E47046E40>\n\n    @pytest.mark.regression\n    @pytest.mark.create_job\n    def test_create_jobs(env, driver, authenticated_user_recruiter):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user_recruiter\n        logging.info(f\"Password entered\")\n    \n        # recruiter_login.hidepassword_btn.click()\n        # logging.info(f\"hide passwrd btn clicked\")\n    \n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n        )\n        #recruiter_login.login_btn.click()\n        logging.info(f\"login btn clicked\")\n        #time.sleep(5)\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n        )\n    \n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        logging.info(f\"jobs btn clicked\")\n        time.sleep(2)\n    \n    \n        # activebtn = Jobs(driver)\n        # activebtn.active_btn.click()\n        # logging.info(f\"active btn clicked\")\n        #\n        # draftsbtn = Jobs(driver)\n        # draftsbtn.drafts_btn.click()\n        #\n        # inactivebtn = Jobs(driver)\n        # inactivebtn.inactive_btn.click()\n        # logging.info(f\"inactive btn clicked\")\n        #\n        # sortby_btn = Jobs(driver)\n        # sortby_btn.Sortby.click()\n        #\n        # last2week = Jobs(driver)\n        # last2week.last2week.click()\n        #\n        # searchtab = Jobs(driver)\n        # searchtab.search_tab.send_keys('3rd July Testing')\n        #\n        # detailsbtn = Jobs(driver)\n        # detailsbtn.details_btn.click()\n        #\n        # candidatesbtn = Jobs(driver)\n        # candidatesbtn.candidates_btn.click()\n        # logging.info(f\"candidate btn clicked\")\n        # #---------------------------------------------\n        #\n        #\n        # # WebDriverWait(driver, 3).until(\n        # #     EC.element_to_be_clickable((By.CSS_SELECTOR, \"#input-0\"))\n        # # )\n        # # candidatecheckbox = Jobs(driver)\n        # # candidatecheckbox.candidates_checkbox.click()\n        # #-------------------------------------------------\n        #\n        # Settings = Jobs(driver)\n        # Settings.Settings_btn.click()\n        #\n        # jobworkflow = Jobs(driver)\n        # jobworkflow.Job_Workflow_btn.click()\n        #\n        # Proctoringbtn = Jobs(driver)\n        # Proctoringbtn.Proctoring_btn.click()\n        #\n        # Cut_off = Jobs(driver)\n        # Cut_off.Cutoff.click()\n        #\n        # Applicationform = Jobs(driver)\n        # Applicationform.Application_Form.click()\n        #\n        # Languagebtn = Jobs(driver)\n        # Languagebtn.Language_btn.click()\n        # logging.info(f\"Lang btn Created\")\n        #\n        # Savebtn = Jobs(driver)\n        # Savebtn.Save_btn.click()\n        # logging.info(f\"save btn clicked\")\n        #\n        #\n        # jobs_page = Jobs(driver)\n        # jobs_page.jobs_btn.click()\n    \n    \n    #CREATE JOB\n    # def test_create_job(env, driver, authenticated_user):\n    #     logging.info(f\"environment -> {env}\")\n    #     login = authenticated_user\n    #     recruiter_login = Loginrecruiter(driver)\n    #     recruiter_login.username_btn.send_keys('inderjeetkmcs@gmail.com')\n    #     recruiter_login.password_btn.send_keys('123')\n    #     logging.info(f\"Password entered\")\n    #\n    #         # recruiter_login.hidepassword_btn.click()\n    #         # logging.info(f\"hide passwrd btn clicked\")\n    #\n    #     WebDriverWait(driver, 10).until(\n    #         EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n    #         )\n    #     recruiter_login.login_btn.click()\n    #     logging.info(f\"login btn clicked\")\n    #         # time.sleep(5)\n    #     WebDriverWait(driver, 10).until(\n    #         EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n    #         )\n    \n        jobs_page = Jobs(driver)\n>       jobs_page.jobs_btn.click()\n\ntests\\recruiter_test\\create_job_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPage_Recruiter\\Jobs_page.py:16: in jobs_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022E47047FE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E682AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E6827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=133.0.6943.143)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00450B43+25139]\nE       \t(No symbol) [0x003E13F4]\nE       \t(No symbol) [0x002C04E3]\nE       \t(No symbol) [0x002AFE10]\nE       \t(No symbol) [0x002CD89A]\nE       \t(No symbol) [0x00333DDF]\nE       \t(No symbol) [0x0034E059]\nE       \t(No symbol) [0x0032CDC6]\nE       \t(No symbol) [0x002FBDE9]\nE       \t(No symbol) [0x002FD124]\nE       \tGetHandleVerifier [0x00754373+3185251]\nE       \tGetHandleVerifier [0x0077291A+3309578]\nE       \tGetHandleVerifier [0x0076CF42+3286578]\nE       \tGetHandleVerifier [0x004E7AE0+643536]\nE       \t(No symbol) [0x003EA20D]\nE       \t(No symbol) [0x003E70B8]\nE       \t(No symbol) [0x003E7257]\nE       \t(No symbol) [0x003D9E00]\nE       \tBaseThreadInitThunk [0x7716FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E682AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E6827E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "36e6c9f6-bdbe-4d8b-b92e-2b3f7d3a38f7-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d66fb8e3-d112-448e-8695-a04a2694af86-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4844363b-1234-4329-9f32-942a3dc993ad-attachment.txt", "type": "text/plain"}], "start": 1741587157174, "stop": 1741587160144, "uuid": "d9fbdc78-ff4c-4031-b414-8735b11049bc", "historyId": "ad650e05e5fefdb7ec0c3ca23f07b908", "testCaseId": "ad650e05e5fefdb7ec0c3ca23f07b908", "fullName": "tests.recruiter_test.create_job_test#test_create_jobs", "labels": [{"name": "tag", "value": "create_job"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "create_job_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "2072-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.create_job_test"}]}