{"name": "test_jobs_page_last2weeksjobsfilter", "status": "failed", "statusDetails": {"message": "AssertionError: Expected <2025-02-05> to be between <2025-02-12> and <2025-02-25>, but was not.", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ab2c7ef87f5f89147d48b38888b861c0\")>, authenticated_user_recruiter = <Page_Recruiter.login.Loginrecruiter object at 0x000001BE8EB7D610>\n\n    @pytest.mark.regression\n    @pytest.mark.jobs_page_last2weeksjobsfilter\n    def test_jobs_page_last2weeksjobsfilter(env, driver, authenticated_user_recruiter):\n        logging.info(f\"environment -> {env}\")\n        #login = authenticated_user_recruiter\n        logging.info(f\"logged in\")\n        WebDriverWait(driver, 15).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"body > div:nth-child(1) > div:nth-child(3) > div:nth-child(3) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1)\"))\n        )\n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        logging.info(f\"jobs button clicked\")\n        assert_that(jobs_page.jobs_card.is_element_visible()).is_true()\n        jobs_page.sortby.click()\n        jobs_page.last2week.click()\n        assert_that(jobs_page.jobs_card.is_element_visible()).is_true()\n        elements =  jobs_page.job_creation_date.find_elements()\n    \n        current_date = datetime.now().date()  # Get the current date (ignoring time)\n        last_2_weeks_start = current_date - timedelta(weeks=2)\n        last_2_weeks_end = current_date - timedelta(days=1)  # Yesterday (ignoring time)\n    \n        logging.info(\n            f\"Last 2 weeks date range: {last_2_weeks_start.strftime('%B %d, %Y')} to {last_2_weeks_end.strftime('%B %d, %Y')}\")\n    \n        # Loop through each element and validate the job creation date\n        for element in elements:\n            JobCardText = element.text\n            logging.info(f\"Job card text: {JobCardText}\")\n    \n            # Match the date in the format \"Created on Month Day, Year\"\n            match = re.search(r\"Created on\\s*([A-Za-z]+ \\d{1,2}, \\d{4})\", JobCardText)\n    \n            if match:\n                job_creation_date_str = match.group(1)\n                logging.info(f\"Extracted Job Creation Date: {job_creation_date_str}\")\n    \n                # Convert the extracted date string into a datetime object and focus only on the date\n                job_creation_date = datetime.strptime(job_creation_date_str, \"%B %d, %Y\").date()  # Convert to date only\n    \n                # Assert that the job creation date is within the last 2 weeks range (dates only, ignoring time)\n>               assert_that(job_creation_date).is_between(last_2_weeks_start, last_2_weeks_end)\nE               AssertionError: Expected <2025-02-05> to be between <2025-02-12> and <2025-02-25>, but was not.\n\ntests\\recruiter_test\\Jobs_test.py:232: AssertionError"}, "attachments": [{"name": "log", "source": "03bc841d-57b4-4dc7-990b-b1f253a458db-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e64d5a5c-6b5a-430c-8568-746ef7057ad5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "285de380-2ad3-46f8-9476-440d79635d74-attachment.txt", "type": "text/plain"}], "start": 1740552934334, "stop": 1740552945341, "uuid": "cc4ad37e-57f2-495b-8530-a1f1873434aa", "historyId": "2a5ea41cf5e5d04ecbafd651e86de010", "testCaseId": "2a5ea41cf5e5d04ecbafd651e86de010", "fullName": "tests.recruiter_test.Jobs_test#test_jobs_page_last2weeksjobsfilter", "labels": [{"name": "tag", "value": "jobs_page_last2weeksjobsfilter"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Jobs_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "4796-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Jobs_test"}]}