{"name": "test_login_recruiter", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.205)\nStacktrace:\n\tGetHandleVerifier [0x00ADEC13+23731]\n\t(No symbol) [0x00A6C394]\n\t(No symbol) [0x0094BE63]\n\t(No symbol) [0x0092D92B]\n\t(No symbol) [0x009B7F7F]\n\t(No symbol) [0x009CAD99]\n\t(No symbol) [0x009B1BF6]\n\t(No symbol) [0x00983F35]\n\t(No symbol) [0x00984EBD]\n\tGetHandleVerifier [0x00DBF0D3+3039603]\n\tGetHandleVerifier [0x00DD2DEA+3120778]\n\tGetHandleVerifier [0x00DCB592+3089970]\n\tGetHandleVerifier [0x00B743B0+635984]\n\t(No symbol) [0x00A74DCD]\n\t(No symbol) [0x00A72068]\n\t(No symbol) [0x00A72205]\n\t(No symbol) [0x00A64FD0]\n\tBaseThreadInitThunk [0x7710FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C2809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C2806E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"70ca2a31e14821384b73b32be8d7d9fc\")>, authenticated_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.login_recruiter\n    def test_login_recruiter(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiterlogin = Loginrecruiter(driver)\n>       recruiterlogin.username_btn.send_keys('inderjeetkmcs@gmail.com')\n\ntests\\recruiter_test\\login_test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage_Recruiter\\login.py:11: in username_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D3985DA5D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C2809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C2806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.205)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00ADEC13+23731]\nE       \t(No symbol) [0x00A6C394]\nE       \t(No symbol) [0x0094BE63]\nE       \t(No symbol) [0x0092D92B]\nE       \t(No symbol) [0x009B7F7F]\nE       \t(No symbol) [0x009CAD99]\nE       \t(No symbol) [0x009B1BF6]\nE       \t(No symbol) [0x00983F35]\nE       \t(No symbol) [0x00984EBD]\nE       \tGetHandleVerifier [0x00DBF0D3+3039603]\nE       \tGetHandleVerifier [0x00DD2DEA+3120778]\nE       \tGetHandleVerifier [0x00DCB592+3089970]\nE       \tGetHandleVerifier [0x00B743B0+635984]\nE       \t(No symbol) [0x00A74DCD]\nE       \t(No symbol) [0x00A72068]\nE       \t(No symbol) [0x00A72205]\nE       \t(No symbol) [0x00A64FD0]\nE       \tBaseThreadInitThunk [0x7710FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C2809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C2806E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "d86551fe-907c-44db-a075-2fa7571a5076-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d593e4ac-e3af-4c48-853e-70c2c0afccde-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "75448494-225c-4101-a889-db48677c2034-attachment.txt", "type": "text/plain"}], "start": 1736139917113, "stop": 1736139933342, "uuid": "64092bff-5439-45eb-a561-29e5692b1047", "historyId": "0997aa77555ca41bce5985f7e54205f5", "testCaseId": "0997aa77555ca41bce5985f7e54205f5", "fullName": "tests.recruiter_test.login_test#test_login_recruiter", "labels": [{"name": "tag", "value": "login_recruiter"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "9320-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.login_test"}]}