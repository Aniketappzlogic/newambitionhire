{"name": "test_login_page_instagramlinks", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=135.0.7049.115)\nStacktrace:\n\tGetHandleVerifier [0x0065D363+60275]\n\tGetHandleVerifier [0x0065D3A4+60340]\n\t(No symbol) [0x004906F3]\n\t(No symbol) [0x0047EAD8]\n\t(No symbol) [0x0047FA3D]\n\t(No symbol) [0x00491103]\n\t(No symbol) [0x0046F745]\n\t(No symbol) [0x0050C5F8]\n\t(No symbol) [0x004FD053]\n\t(No symbol) [0x004CC623]\n\t(No symbol) [0x004CD474]\n\tGetHandleVerifier [0x008A8FE3+2467827]\n\tGetHandleVerifier [0x008A45E6+2448886]\n\tGetHandleVerifier [0x008BF80C+2560028]\n\tGetHandleVerifier [0x00673DF5+153093]\n\tGetHandleVerifier [0x0067A3BD+179149]\n\tGetHandleVerifier [0x00664BB8+91080]\n\tGetHandleVerifier [0x00664D60+91504]\n\tGetHandleVerifier [0x0064FA10+4640]\n\tBaseThreadInitThunk [0x76E3FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3e44b7f99e4b41fa7edb02dba72ad3fc\")>, recruiter_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.regression_recruiter_loginpage\n    @pytest.mark.login_page_instagramlinks\n    def test_login_page_instagramlinks(env, driver, recruiter_user):\n        logging.info(f\"environment -> {env}\")\n        login = recruiter_user\n        recruiterlogin = Loginrecruiter(driver)\n        original_window = driver.current_window_handle\n    \n>       window_count = recruiterlogin.aboutuspage_btn.get_window_handle_count()\n\ntests\\recruiter_test\\login_test.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_elements.py:318: in get_window_handle_count\n    WebDriverWait(self.driver, timeout=10).until(lambda driver: len(driver.window_handles) > 1)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nutils\\base_elements.py:318: in <lambda>\n    WebDriverWait(self.driver, timeout=10).until(lambda driver: len(driver.window_handles) > 1)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:495: in window_handles\n    return self.execute(Command.W3C_GET_WINDOW_HANDLES)[\"value\"]\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000252CC314860>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=135.0.7049.115)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0065D363+60275]\nE       \tGetHandleVerifier [0x0065D3A4+60340]\nE       \t(No symbol) [0x004906F3]\nE       \t(No symbol) [0x0047EAD8]\nE       \t(No symbol) [0x0047FA3D]\nE       \t(No symbol) [0x00491103]\nE       \t(No symbol) [0x0046F745]\nE       \t(No symbol) [0x0050C5F8]\nE       \t(No symbol) [0x004FD053]\nE       \t(No symbol) [0x004CC623]\nE       \t(No symbol) [0x004CD474]\nE       \tGetHandleVerifier [0x008A8FE3+2467827]\nE       \tGetHandleVerifier [0x008A45E6+2448886]\nE       \tGetHandleVerifier [0x008BF80C+2560028]\nE       \tGetHandleVerifier [0x00673DF5+153093]\nE       \tGetHandleVerifier [0x0067A3BD+179149]\nE       \tGetHandleVerifier [0x00664BB8+91080]\nE       \tGetHandleVerifier [0x00664D60+91504]\nE       \tGetHandleVerifier [0x0064FA10+4640]\nE       \tBaseThreadInitThunk [0x76E3FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "b6d9a526-0554-4bb3-aa16-a51eb532ef9c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "cdee5f34-28ec-4989-8e10-41398ee43aa7-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "95da29ea-5734-4bc0-aa9e-7a8fcbd6a8e2-attachment.txt", "type": "text/plain"}], "start": 1745925414965, "stop": 1745925420659, "uuid": "54c46c41-9b5e-4192-9ceb-a60173cb83e4", "historyId": "73c3728160953ea3e977f977487d4fac", "testCaseId": "73c3728160953ea3e977f977487d4fac", "fullName": "tests.recruiter_test.login_test#test_login_page_instagramlinks", "labels": [{"name": "tag", "value": "login_page_instagramlinks"}, {"name": "tag", "value": "regression_recruiter_loginpage"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "10660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.login_test"}]}