{"name": "test_registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "env = 'pilot', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f9fc4e794e83099d418b24df36cfcffa\")>, authenticated_user = None\n\n    @pytest.mark.registration\n    def test_registration(env, driver,authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        registration = Registration(driver)\n        driver.implicitly_wait(5)\n>       registration.registartion_name_btn.send_keys('MRIDUL')\n\ntests\\candidate_test\\registration_test.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\registration.py:11: in registartion_name_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f9fc4e794e83099d418b24df36cfcffa\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001E264495A80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "5c7876c2-231b-4c49-8add-e8da19a2090c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "6d50c74a-f798-4203-bbd3-4ea0edc59474-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "da77aeb4-017c-4537-bfb1-8f203943391e-attachment.txt", "type": "text/plain"}], "start": 1721639788102, "stop": 1721639818280, "uuid": "954f347a-4abb-45b1-8dd7-e05ea1698610", "historyId": "b91bc7f231e3740fe6c0b8995a99c077", "testCaseId": "b91bc7f231e3740fe6c0b8995a99c077", "fullName": "tests.candidate_test.registration_test#test_registration", "labels": [{"name": "tag", "value": "registration"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "registration_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "37912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.registration_test"}]}