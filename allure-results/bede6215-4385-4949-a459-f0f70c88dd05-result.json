{"name": "test_jobs_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input data-v-fcade48c=\"\" type=\"text\" placeholder=\"Name\" min=\"0\" max=\"100000\" class=\"inputEl px-2 py-[18.5px] rounded-[4px] w-full border-b-2 placeholder-transparent focus:outline-none border-disabled-color pt-[15px] pb-[12px]\" style=\"background-color: rgba(244, 7, 120, 0.08);\"> is not clickable at point (697, 269). Other element would receive the click: <div class=\"fixed z-[100] inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\">...</div>\n  (Session info: chrome=132.0.6834.196)\nStacktrace:\n\tGetHandleVerifier [0x00E774A3+25091]\n\t(No symbol) [0x00DFDC04]\n\t(No symbol) [0x00CDB373]\n\t(No symbol) [0x00D254B8]\n\t(No symbol) [0x00D238C4]\n\t(No symbol) [0x00D21467]\n\t(No symbol) [0x00D2076A]\n\t(No symbol) [0x00D153A5]\n\t(No symbol) [0x00D41F0C]\n\t(No symbol) [0x00D14E44]\n\t(No symbol) [0x00D421A4]\n\t(No symbol) [0x00D5B49E]\n\t(No symbol) [0x00D41CA6]\n\t(No symbol) [0x00D131D5]\n\t(No symbol) [0x00D1435D]\n\tGetHandleVerifier [0x011707C3+3142947]\n\tGetHandleVerifier [0x01181A2B+3213195]\n\tGetHandleVerifier [0x0117C412+3191154]\n\tGetHandleVerifier [0x00F18720+685184]\n\t(No symbol) [0x00E06E1D]\n\t(No symbol) [0x00E03E18]\n\t(No symbol) [0x00E03FB6]\n\t(No symbol) [0x00DF66F0]\n\tBaseThreadInitThunk [0x7610FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9c7425199f8901ef8b8381ff2a733feb\")>, authenticated_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.assessments_page\n    def test_jobs_page(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiter_login = Loginrecruiter(driver)\n        recruiter_login.username_btn.send_keys('inderjeetkmcs@gmail.com')\n        recruiter_login.password_btn.send_keys('123')\n        logging.info(f\"Password entered\")\n    \n        # recruiter_login.hidepassword_btn.click()\n        # logging.info(f\"hide passwrd btn clicked\")\n    \n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n        )\n        recruiter_login.login_btn.click()\n        logging.info(f\"login btn clicked\")\n        #time.sleep(5)\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n        )\n        assessment_page = Assessments(driver)\n        assessment_page.assessments_btn.click()\n        logging.info(f\"Assessments btn clicked\")\n        logger.info(f\"assessment page btn clicked\")\n        time.sleep(2)\n    \n        inactivejobs = Assessments(driver)\n        inactivejobs.inactive_btn.click()\n    \n        draftjobs = Assessments(driver)\n        draftjobs.drafts_btn.click()\n        time.sleep(2)\n    \n        # searchtab = Assessments(driver)\n        # searchtab.search_tab.send_keys('Automated 1002')\n        #\n        # selectjob = Assessments(driver)\n        # selectjob.select_job.click()\n        #\n        # CreateNewAssessment =  Assessments(driver)\n        # CreateNewAssessment.Create_New_Assessment.click()\n        # time.sleep(4)\n    \n        #//////////////////  CTQ  ///////////(COMMENT OUT ctq CODE IF CTQ IS NOT SELECTED FOR ASSESSMENT )\n    \n    #     AddCTQ = Assessments(driver)\n    #     AddCTQ.Add_CTQ.click()\n    #\n    #     CTQname = Assessments(driver)\n    #     CTQname.CTQ_name.send_keys('CTQ')\n    #\n    #     CTQduration = Assessments(driver)\n    #     CTQduration.CTQ_duration.send_keys(10)\n    #\n    #     CTQcutoff = Assessments(driver)\n    #     CTQcutoff.CTQ_cutoff.click()\n    #\n    #     CutoffValue = Assessments(driver)\n    #     CutoffValue.Cutoff_value.click()\n    #\n    #     CTQinstructions = Assessments(driver)\n    #     CTQinstructions.CTQ_instructions.click()\n    #\n    #     CTQques = Assessments(driver)\n    #     CTQques.CTQ_questions.click()\n    #\n    # #/////////////// ADD CUSTOM QUESTIONS //////////////////////////\n    #\n    #     #//// FREE TEXT QUES ////\n    #     ques_to_send = [\n    #         \"What is your name?\",  # For iteration 1\n    #         \"What is your current Location?\",  # For iteration 2\n    #         \"Do you have a passport?\",  # For iteration 3\n    #         \"Do you know Python?\",  # For iteration 4\n    #         \"\"\n    #     ]\n    #\n    #     for i in range (4):\n    #         AddCustomQues = Assessments(driver)\n    #         AddCustomQues.Add_Custom_questions.click()\n    #\n    #         CustomQuesField = Assessments(driver)\n    #         CustomQuesField.Custom_question_field.send_keys(ques_to_send[i])\n    #\n    #         FreeTextToggle = Assessments(driver)\n    #         FreeTextToggle.FreeText_Toggle.click()\n    #\n    #         SaveButton = Assessments(driver)\n    #         SaveButton.Save_button.click()\n    #\n    #     for i in range (2):\n    #         AddCustomQues = Assessments(driver)\n    #         AddCustomQues.Add_Custom_questions.click()\n    #\n    #         CustomQuesField = Assessments(driver)\n    #         CustomQuesField.Custom_question_field.send_keys(ques_to_send[i])\n    #\n    #         SaveButton = Assessments(driver)\n    #         SaveButton.Save_button.click()\n    #\n    #     CTQLibQues = Assessments(driver)\n    #     CTQLibQues.questions.click()\n    #     CTQLibQues.questions2.click()\n    #\n    #     SaveChanges = Assessments(driver)\n    #     SaveChanges.CTQ_SaveChanges.click()\n    \n      #//////////////////////////////  FUNCTIONAL ASSESSMENT  ////////////// (COMMENT OUT IF FUNCTIONAL IS NOT SELECTED FOR ASSESSMENT ) ////////////////////////\n    \n        # searchtab = Assessments(driver)\n        # searchtab.search_tab.send_keys('Automated 1002')   #CHANGE THIS ACCORDING TO JOB NAME\n        #\n        # selectjob = Assessments(driver)\n        # selectjob.select_job.click()\n        #\n        # CreateNewAssessment = Assessments(driver)\n        # CreateNewAssessment.Create_New_Assessment.click()\n        # time.sleep(4)\n        #\n        # AddFunctional = Assessments(driver)\n        # AddFunctional.Add_Functional.click()\n        #\n        # FunctionalName = Assessments(driver)\n        # FunctionalName.Functional_name.send_keys('Functional')\n        #\n        # FunctionalCutoff = Assessments(driver)\n        # FunctionalCutoff.Functional_cutoff.click()\n        # logger.info(f\"cutoff\")\n        #\n        #\n        # FuncCutoffvalue = Assessments(driver)\n        # FuncCutoffvalue.Func_Cutoff_value.click()\n        #\n        #\n        # SaveandNext = Assessments(driver)\n        # SaveandNext.Save_Next.click()\n        # logger.info(f\"Save and Next clicked\")\n        #\n        #\n        # FuncModules =Assessments(driver)\n        # FuncModules.Func_Modules.click()\n        # logger.info(f\"Modules clicked\")\n        # WebDriverWait(driver, 10).until(\n        #     EC.visibility_of_element_located((By.XPATH, \"//body/div/div/div/div/div[5]/div[1]\"))\n        # )\n        #\n        #\n        # SearchModules = Assessments(driver)\n        # SearchModules.Func_Search_Modules.send_keys('Mathematical Ability')\n        #\n        # AddModule = Assessments(driver)\n        # AddModule.Add_Module.click()\n        #\n        # EasyQues = Assessments(driver)\n        # EasyQues.Easy_Ques.click()\n        #\n        # Ques = Assessments(driver)\n        # Ques.Ques_1.click()\n        # Ques.Ques_2.click()\n        # Ques.Ques_3.click()\n        # EasyQues = Assessments(driver)\n        # EasyQues.Easy_Ques.click()\n        #\n        # MediumQues = Assessments(driver)\n        # MediumQues.Medium_Ques.click()\n        #\n        # MedQues = Assessments(driver)\n        # MedQues.Med_Ques_1.click()\n        # MedQues.Med_Ques_2.click()\n        # MedQues.Med_Ques_3.click()\n        # MediumQues = Assessments(driver)\n        # MediumQues.Medium_Ques.click()\n        #\n        # HardQues = Assessments(driver)\n        # HardQues.Hard_Ques.click()\n        #\n        # HQues = Assessments(driver)\n        # HQues.Hard_Ques_1.click()\n        # HQues.Hard_Ques_2.click()\n        # HQues.Hard_Ques_3.click()\n        # HardQues = Assessments(driver)\n        # HardQues.Hard_Ques.click()\n        #\n        # SaveChangesFunc = Assessments(driver)\n        # SaveChangesFunc.Save_Changes_Func.click()\n        # time.sleep(4)\n        #\n        #\n        # FinishFunc = Assessments(driver)\n        # FinishFunc.Finish_Func.click()\n    \n        #//////////////////////////////  ENGLISH  ///////////////////////////////////////////\n    \n        searchtab = Assessments(driver)\n        searchtab.search_tab.send_keys('Automated 1002')  # CHANGE THIS ACCORDING TO JOB NAME\n    \n        selectjob = Assessments(driver)\n        selectjob.select_job.click()\n    \n        CreateNewAssessment = Assessments(driver)\n        CreateNewAssessment.Create_New_Assessment.click()\n        time.sleep(4)\n    \n        AddEnglish = Assessments(driver)\n        AddEnglish.Add_English.click()\n    \n        English_Assessment_Name = Assessments(driver)\n>       English_Assessment_Name.English_name.click()\n\ntests\\recruiter_test\\Assessments_test.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_elements.py:77: in click\n    element.click()\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F9DF9AA300>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input data-v-fcade48c=\"\" type=\"text\" placeholder=\"Name\" min=\"0\" max=\"100000\" class=\"inputEl px-2 py-[18.5px] rounded-[4px] w-full border-b-2 placeholder-transparent focus:outline-none border-disabled-color pt-[15px] pb-[12px]\" style=\"background-color: rgba(244, 7, 120, 0.08);\"> is not clickable at point (697, 269). Other element would receive the click: <div class=\"fixed z-[100] inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\">...</div>\nE         (Session info: chrome=132.0.6834.196)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E774A3+25091]\nE       \t(No symbol) [0x00DFDC04]\nE       \t(No symbol) [0x00CDB373]\nE       \t(No symbol) [0x00D254B8]\nE       \t(No symbol) [0x00D238C4]\nE       \t(No symbol) [0x00D21467]\nE       \t(No symbol) [0x00D2076A]\nE       \t(No symbol) [0x00D153A5]\nE       \t(No symbol) [0x00D41F0C]\nE       \t(No symbol) [0x00D14E44]\nE       \t(No symbol) [0x00D421A4]\nE       \t(No symbol) [0x00D5B49E]\nE       \t(No symbol) [0x00D41CA6]\nE       \t(No symbol) [0x00D131D5]\nE       \t(No symbol) [0x00D1435D]\nE       \tGetHandleVerifier [0x011707C3+3142947]\nE       \tGetHandleVerifier [0x01181A2B+3213195]\nE       \tGetHandleVerifier [0x0117C412+3191154]\nE       \tGetHandleVerifier [0x00F18720+685184]\nE       \t(No symbol) [0x00E06E1D]\nE       \t(No symbol) [0x00E03E18]\nE       \t(No symbol) [0x00E03FB6]\nE       \t(No symbol) [0x00DF66F0]\nE       \tBaseThreadInitThunk [0x7610FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "c84a12bd-7ec6-4224-a970-9dd275312a7b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7d87bcb9-5119-468b-8441-50ab621a217b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1dbe5aa8-081c-455e-99a1-2543c3f8a587-attachment.txt", "type": "text/plain"}], "start": 1739265338374, "stop": 1739265352389, "uuid": "a34ea050-e57b-42c9-9707-5736abb0ea97", "historyId": "f3480c03aab544bdce54dce0e9ba0ecc", "testCaseId": "f3480c03aab544bdce54dce0e9ba0ecc", "fullName": "tests.recruiter_test.Assessments_test#test_jobs_page", "labels": [{"name": "tag", "value": "assessments_page"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Assessments_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "15624-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Assessments_test"}]}