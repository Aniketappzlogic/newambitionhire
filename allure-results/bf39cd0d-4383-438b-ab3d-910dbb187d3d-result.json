{"name": "test_jobs_page_lastweekjobsfilter", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression .flex.flex-wrap.gap-8.p-8.w-full because of the following error:\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '.flex.flex-wrap.gap-8.p-8.w-full' is not a valid XPath expression.\n  (Session info: chrome=133.0.6943.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x01220283+25139]\n\t(No symbol) [0x011AB234]\n\t(No symbol) [0x010804A3]\n\t(No symbol) [0x01086EA1]\n\t(No symbol) [0x01088F9A]\n\t(No symbol) [0x01089017]\n\t(No symbol) [0x010C7BC1]\n\t(No symbol) [0x010C868B]\n\t(No symbol) [0x01110F62]\n\t(No symbol) [0x010ECF84]\n\t(No symbol) [0x0110E6E1]\n\t(No symbol) [0x010ECD36]\n\t(No symbol) [0x010BBD29]\n\t(No symbol) [0x010BD064]\n\tGetHandleVerifier [0x0152B143+3215603]\n\tGetHandleVerifier [0x015422BA+3310186]\n\tGetHandleVerifier [0x0153C4D2+3286146]\n\tGetHandleVerifier [0x012B9C80+654384]\n\t(No symbol) [0x011B45BD]\n\t(No symbol) [0x011B14A8]\n\t(No symbol) [0x011B1647]\n\t(No symbol) [0x011A3D20]\n\tBaseThreadInitThunk [0x7643FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7753809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7753806E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c85e86a2135609cc8ee415126f3b13fa\")>, authenticated_user_recruiter = <Page_Recruiter.login.Loginrecruiter object at 0x000002419257BBF0>\n\n    @pytest.mark.regression\n    @pytest.mark.jobs_page_lastweekjobsfilter\n    def test_jobs_page_lastweekjobsfilter(env, driver, authenticated_user_recruiter):\n        logging.info(f\"environment -> {env}\")\n        #login = authenticated_user_recruiter\n        logging.info(f\"logged in\")\n        WebDriverWait(driver, 15).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"body > div:nth-child(1) > div:nth-child(3) > div:nth-child(3) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1)\"))\n        )\n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        logging.info(f\"jobs button clicked\")\n        assert_that(jobs_page.jobs_card.is_element_visible()).is_true()\n        jobs_page.sortby.click()\n        jobs_page.lastweek.click()\n        assert_that(jobs_page.jobs_card.is_element_visible()).is_true()\n    \n>       list = jobs_page.job_creation_date.get_text()\n\ntests\\recruiter_test\\Jobs_test.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage_Recruiter\\Jobs_page.py:31: in job_creation_date\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024192578BF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: Unable to locate an elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7753809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7753806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: Unable to locate an element with the xpath expression .flex.flex-wrap.gap-8.p-8.w-full because of the following error:\nE       SyntaxError: Failed to execute 'evaluate' on 'Document': The string '.flex.flex-wrap.gap-8.p-8.w-full' is not a valid XPath expression.\nE         (Session info: chrome=133.0.6943.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x01220283+25139]\nE       \t(No symbol) [0x011AB234]\nE       \t(No symbol) [0x010804A3]\nE       \t(No symbol) [0x01086EA1]\nE       \t(No symbol) [0x01088F9A]\nE       \t(No symbol) [0x01089017]\nE       \t(No symbol) [0x010C7BC1]\nE       \t(No symbol) [0x010C868B]\nE       \t(No symbol) [0x01110F62]\nE       \t(No symbol) [0x010ECF84]\nE       \t(No symbol) [0x0110E6E1]\nE       \t(No symbol) [0x010ECD36]\nE       \t(No symbol) [0x010BBD29]\nE       \t(No symbol) [0x010BD064]\nE       \tGetHandleVerifier [0x0152B143+3215603]\nE       \tGetHandleVerifier [0x015422BA+3310186]\nE       \tGetHandleVerifier [0x0153C4D2+3286146]\nE       \tGetHandleVerifier [0x012B9C80+654384]\nE       \t(No symbol) [0x011B45BD]\nE       \t(No symbol) [0x011B14A8]\nE       \t(No symbol) [0x011B1647]\nE       \t(No symbol) [0x011A3D20]\nE       \tBaseThreadInitThunk [0x7643FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7753809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7753806E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "attachments": [{"name": "log", "source": "676b1b6e-b874-40a8-8b6e-07711664452a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f3be27cf-41b0-4404-b827-a8e78228d4a1-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "1ff21553-4dff-44b0-80a4-6e423ac04ec7-attachment.txt", "type": "text/plain"}], "start": 1740488471311, "stop": 1740488487697, "uuid": "ea6db0f3-ac6e-40fa-9718-b85f9b763d11", "historyId": "939b9e3c6d25712668edb03be0e0abbe", "testCaseId": "939b9e3c6d25712668edb03be0e0abbe", "fullName": "tests.recruiter_test.Jobs_test#test_jobs_page_lastweekjobsfilter", "labels": [{"name": "tag", "value": "jobs_page_lastweekjobsfilter"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Jobs_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "20988-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Jobs_test"}]}