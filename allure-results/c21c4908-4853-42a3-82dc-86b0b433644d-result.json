{"name": "test_jobs_page_next_to_proctoring_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0065D363+60275]\n\tGetHandleVerifier [0x0065D3A4+60340]\n\t(No symbol) [0x004906F3]\n\t(No symbol) [0x00496E47]\n\t(No symbol) [0x0049913A]\n\t(No symbol) [0x004991B7]\n\t(No symbol) [0x004DA32A]\n\t(No symbol) [0x004D94F0]\n\t(No symbol) [0x004CE265]\n\t(No symbol) [0x004FD08C]\n\t(No symbol) [0x004CDCF4]\n\t(No symbol) [0x004FD304]\n\t(No symbol) [0x0051E6EB]\n\t(No symbol) [0x004FCE86]\n\t(No symbol) [0x004CC623]\n\t(No symbol) [0x004CD474]\n\tGetHandleVerifier [0x008A8FE3+2467827]\n\tGetHandleVerifier [0x008A45E6+2448886]\n\tGetHandleVerifier [0x008BF80C+2560028]\n\tGetHandleVerifier [0x00673DF5+153093]\n\tGetHandleVerifier [0x0067A3BD+179149]\n\tGetHandleVerifier [0x00664BB8+91080]\n\tGetHandleVerifier [0x00664D60+91504]\n\tGetHandleVerifier [0x0064FA10+4640]\n\tBaseThreadInitThunk [0x76E3FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\n\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"237e5f58e3836bd196cc39e070ab0c9c\")>, authenticated_user_recruiter = <Page_Recruiter.login.Loginrecruiter object at 0x0000023BFF5B1E20>\n\n    @pytest.mark.regression\n    @pytest.mark.jobs_page_next_to_proctoring_button\n    def test_jobs_page_next_to_proctoring_button(env, driver, authenticated_user_recruiter):\n        logging.info(f\"environment -> {env}\")\n        logging.info(f\"logged in\")\n        WebDriverWait(driver, 15).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR,\n                                              \"body > div:nth-child(1) > div:nth-child(3) > div:nth-child(3) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1)\"))\n        )\n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        assert_that(jobs_page.Create_Job.is_element_visible()).is_true()\n        jobs_page.Create_Job.click()\n    \n        jobtitle = Jobs(driver)\n        jobtitle.Job_Title.send_keys('Testing Job')\n    \n        notificationtitle = Jobs(driver)\n        notificationtitle.Notification_Title.send_keys(\"Automated\")\n    \n        JobDescription = Jobs(driver)\n        JobDescription.Job_Description.send_keys('Draft')\n    \n        department = Jobs(driver)\n        department.Department.click()\n        department.Department_selector.click()\n    \n        industry = Jobs(driver)\n        industry.Industry.click()\n        industry.Industry_selector.click()\n    \n        Employmenttype = Jobs(driver)\n        Employmenttype.Employment_Type.click()\n        Employmenttype.Employmenttype_selector.click()\n    \n        WorkplaceType = Jobs(driver)\n        WorkplaceType.Workplace_Type.click()\n        WorkplaceType.Workplace_Type_Selector.click()\n    \n        WorkExperience = Jobs(driver)\n        WorkExperience.Work_Experience.click()\n        WorkExperience.Workplace_Experience_Selector.click()\n    \n        location = Jobs(driver)\n        location.Location.send_keys('Gurg')\n        location.Location_selector.click()\n    \n        MinSalary = Jobs(driver)\n        MinSalary.Min_Salary.send_keys('2')\n    \n        MaxSalary = Jobs(driver)\n        MaxSalary.Max_Salary.send_keys('4')\n    \n        Next = Jobs(driver)\n        Next.Next_btn.click()\n    \n        OneSittingToggle = Jobs(driver)\n        OneSittingToggle.OneSitting_toggle.click()\n    \n        Nxt = Jobs(driver)\n        Nxt.Next_butn.click()\n    \n        Next_to_Proctoring = Jobs(driver)\n>       Next_to_Proctoring.Next_btn_to_Proctoring.click()\n\ntests\\recruiter_test\\Jobs_test.py:1954: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_elements.py:77: in click\n    element.click()\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023BFF5876E0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0065D363+60275]\nE       \tGetHandleVerifier [0x0065D3A4+60340]\nE       \t(No symbol) [0x004906F3]\nE       \t(No symbol) [0x00496E47]\nE       \t(No symbol) [0x0049913A]\nE       \t(No symbol) [0x004991B7]\nE       \t(No symbol) [0x004DA32A]\nE       \t(No symbol) [0x004D94F0]\nE       \t(No symbol) [0x004CE265]\nE       \t(No symbol) [0x004FD08C]\nE       \t(No symbol) [0x004CDCF4]\nE       \t(No symbol) [0x004FD304]\nE       \t(No symbol) [0x0051E6EB]\nE       \t(No symbol) [0x004FCE86]\nE       \t(No symbol) [0x004CC623]\nE       \t(No symbol) [0x004CD474]\nE       \tGetHandleVerifier [0x008A8FE3+2467827]\nE       \tGetHandleVerifier [0x008A45E6+2448886]\nE       \tGetHandleVerifier [0x008BF80C+2560028]\nE       \tGetHandleVerifier [0x00673DF5+153093]\nE       \tGetHandleVerifier [0x0067A3BD+179149]\nE       \tGetHandleVerifier [0x00664BB8+91080]\nE       \tGetHandleVerifier [0x00664D60+91504]\nE       \tGetHandleVerifier [0x0064FA10+4640]\nE       \tBaseThreadInitThunk [0x76E3FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774282AE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7742827E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "ce9b17f4-ffae-4280-9b9a-063071bc6229-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "444a4f42-8eeb-4276-8c83-a836c441ba21-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4c9a1ae9-c51b-4930-b7e2-d10957381839-attachment.txt", "type": "text/plain"}], "start": 1745918568683, "stop": 1745918574004, "uuid": "e0d0a014-bd61-4513-bfad-bd75a0ffd9c6", "historyId": "e7397ae8cd453ed94d1500f23bb6887b", "testCaseId": "e7397ae8cd453ed94d1500f23bb6887b", "fullName": "tests.recruiter_test.Jobs_test#test_jobs_page_next_to_proctoring_button", "labels": [{"name": "tag", "value": "jobs_page_next_to_proctoring_button"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Jobs_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "19876-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Jobs_test"}]}