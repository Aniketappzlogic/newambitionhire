{"name": "test_registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\n  (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00BCC203+27395]\n\t(No symbol) [0x00B63E04]\n\t(No symbol) [0x00A61B7F]\n\t(No symbol) [0x00A66C7F]\n\t(No symbol) [0x00A688F8]\n\t(No symbol) [0x00A68970]\n\t(No symbol) [0x00AA28A7]\n\t(No symbol) [0x00AA2D3B]\n\t(No symbol) [0x00ADEC82]\n\t(No symbol) [0x00AC39E4]\n\t(No symbol) [0x00ADCB24]\n\t(No symbol) [0x00AC3736]\n\t(No symbol) [0x00A97541]\n\t(No symbol) [0x00A980BD]\n\tGetHandleVerifier [0x00E83AB3+2876339]\n\tGetHandleVerifier [0x00ED7F7D+3221629]\n\tGetHandleVerifier [0x00C4D674+556916]\n\tGetHandleVerifier [0x00C5478C+585868]\n\t(No symbol) [0x00B6CE44]\n\t(No symbol) [0x00B69858]\n\t(No symbol) [0x00B699F7]\n\t(No symbol) [0x00B5BF4E]\n\tBaseThreadInitThunk [0x7703FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"03ec7fc3815d5cb9d48e7bcf4c2cd540\")>, authenticated_user = None\n\n    @pytest.mark.registration\n    def test_registration(env, driver,authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        registration = Registration(driver)\n        driver.implicitly_wait(5)\n        registration.registartion_name_btn.send_keys('MRIDUL')\n        driver.implicitly_wait(2)\n        registration.email_btn.send_keys('mridulsaxena@gmail.com')\n        registration.phoneno_btn.send_keys('7503078450')\n        registration.location_btn.send_keys('Uttar Pradesh: Noida')\n        driver.implicitly_wait(10)\n>       registration.condition_btn.click()\n\ntests\\candidate_test\\registration_test.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\registration.py:30: in condition_btn\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021905F8EBD0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"An invalid or illegal selector was specified\"}\nE         (Session info: chrome=126.0.6478.127); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00BCC203+27395]\nE       \t(No symbol) [0x00B63E04]\nE       \t(No symbol) [0x00A61B7F]\nE       \t(No symbol) [0x00A66C7F]\nE       \t(No symbol) [0x00A688F8]\nE       \t(No symbol) [0x00A68970]\nE       \t(No symbol) [0x00AA28A7]\nE       \t(No symbol) [0x00AA2D3B]\nE       \t(No symbol) [0x00ADEC82]\nE       \t(No symbol) [0x00AC39E4]\nE       \t(No symbol) [0x00ADCB24]\nE       \t(No symbol) [0x00AC3736]\nE       \t(No symbol) [0x00A97541]\nE       \t(No symbol) [0x00A980BD]\nE       \tGetHandleVerifier [0x00E83AB3+2876339]\nE       \tGetHandleVerifier [0x00ED7F7D+3221629]\nE       \tGetHandleVerifier [0x00C4D674+556916]\nE       \tGetHandleVerifier [0x00C5478C+585868]\nE       \t(No symbol) [0x00B6CE44]\nE       \t(No symbol) [0x00B69858]\nE       \t(No symbol) [0x00B699F7]\nE       \t(No symbol) [0x00B5BF4E]\nE       \tBaseThreadInitThunk [0x7703FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C980CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C9809E+238]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "attachments": [{"name": "log", "source": "0c13f8fa-caa7-432e-9ca4-450a58cf1ebc-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5d472acf-973d-4f4a-9186-2b8803dc33b3-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "8f348db1-81f7-44f4-90e3-99b5aafc29b6-attachment.txt", "type": "text/plain"}], "start": 1721646752361, "stop": 1721646753495, "uuid": "52f1e4c1-d3e8-4453-b237-1ba0dfc32322", "historyId": "b91bc7f231e3740fe6c0b8995a99c077", "testCaseId": "b91bc7f231e3740fe6c0b8995a99c077", "fullName": "tests.candidate_test.registration_test#test_registration", "labels": [{"name": "tag", "value": "registration"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "registration_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "16388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.registration_test"}]}