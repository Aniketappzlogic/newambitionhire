{"name": "test_login", "status": "failed", "statusDetails": {"message": "Failed: Chrome driver initialization failed: Message: Unable to obtain driver for chrome using Selenium Manager.; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location", "trace": "args = ['C:\\\\Users\\\\AppzLogic\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\selenium\\\\webdriver\\\\common\\\\windows\\\\selenium-manager.exe', '--browser', 'chrome', '--output', 'json']\n\n    @staticmethod\n    def run(args: List[str]) -> dict:\n        \"\"\"Executes the Selenium Manager Binary.\n    \n        :Args:\n         - args: the components of the command being executed.\n        :Returns: The log string containing the driver location.\n        \"\"\"\n        if logger.getEffectiveLevel() == logging.DEBUG:\n            args.append(\"--debug\")\n        args.append(\"--output\")\n        args.append(\"json\")\n    \n        command = \" \".join(args)\n        logger.debug(\"Executing process: %s\", command)\n        try:\n            if sys.platform == \"win32\":\n                completed_proc = subprocess.run(args, capture_output=True, creationflags=subprocess.CREATE_NO_WINDOW)\n            else:\n                completed_proc = subprocess.run(args, capture_output=True)\n            stdout = completed_proc.stdout.decode(\"utf-8\").rstrip(\"\\n\")\n            stderr = completed_proc.stderr.decode(\"utf-8\").rstrip(\"\\n\")\n>           output = json.loads(stdout)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000133D04BC980>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nThe above exception was the direct cause of the following exception:\n\nservice = <selenium.webdriver.chrome.service.Service object at 0x00000133D3501610>\noptions = <selenium.webdriver.chrome.options.Options object at 0x00000133D35FE4E0>\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n>           path = SeleniumManager().driver_location(options) if path is None else path\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:103: in driver_location\n    output = self.run(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = ['C:\\\\Users\\\\AppzLogic\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\selenium\\\\webdriver\\\\common\\\\windows\\\\selenium-manager.exe', '--browser', 'chrome', '--output', 'json']\n\n    @staticmethod\n    def run(args: List[str]) -> dict:\n        \"\"\"Executes the Selenium Manager Binary.\n    \n        :Args:\n         - args: the components of the command being executed.\n        :Returns: The log string containing the driver location.\n        \"\"\"\n        if logger.getEffectiveLevel() == logging.DEBUG:\n            args.append(\"--debug\")\n        args.append(\"--output\")\n        args.append(\"json\")\n    \n        command = \" \".join(args)\n        logger.debug(\"Executing process: %s\", command)\n        try:\n            if sys.platform == \"win32\":\n                completed_proc = subprocess.run(args, capture_output=True, creationflags=subprocess.CREATE_NO_WINDOW)\n            else:\n                completed_proc = subprocess.run(args, capture_output=True)\n            stdout = completed_proc.stdout.decode(\"utf-8\").rstrip(\"\\n\")\n            stderr = completed_proc.stderr.decode(\"utf-8\").rstrip(\"\\n\")\n            output = json.loads(stdout)\n            result = output[\"result\"]\n        except Exception as err:\n>           raise WebDriverException(f\"Unsuccessful command executed: {command}\") from err\nE           selenium.common.exceptions.WebDriverException: Message: Unsuccessful command executed: C:\\Users\\AppzLogic\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\windows\\selenium-manager.exe --browser chrome --output json\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\selenium_manager.py:140: WebDriverException\n\nThe above exception was the direct cause of the following exception:\n\nmyBrowser = 'chrome'\n\n    @pytest.fixture(scope=\"session\")\n    def driver(myBrowser):\n        if myBrowser == 'chrome':\n            options = Options()\n            options.add_argument(\"--window-size=1920,1080\")\n            options.add_argument(\"--use-fake-ui-for-media-stream\")\n            try:\n                service = ChromeService(ChromeDriverManager().install())\n                # driver = webdriver.Chrome(service=service, options=options)\n>               driver = webdriver.Chrome( options=options)\n\nconftest.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:49: in __init__\n    self.service.path = DriverFinder.get_path(self.service, options)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nservice = <selenium.webdriver.chrome.service.Service object at 0x00000133D3501610>\noptions = <selenium.webdriver.chrome.options.Options object at 0x00000133D35FE4E0>\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n            path = SeleniumManager().driver_location(options) if path is None else path\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {options.capabilities['browserName']} using Selenium Manager.\"\n>           raise NoSuchDriverException(msg) from err\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to obtain driver for chrome using Selenium Manager.; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:41: NoSuchDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nmyBrowser = 'chrome'\n\n    @pytest.fixture(scope=\"session\")\n    def driver(myBrowser):\n        if myBrowser == 'chrome':\n            options = Options()\n            options.add_argument(\"--window-size=1920,1080\")\n            options.add_argument(\"--use-fake-ui-for-media-stream\")\n            try:\n                service = ChromeService(ChromeDriverManager().install())\n                # driver = webdriver.Chrome(service=service, options=options)\n                driver = webdriver.Chrome( options=options)\n                driver.maximize_window()\n            except Exception as e:\n                logging.error(f\"Chrome driver initialization failed: {e}\")\n>               pytest.fail(f\"Chrome driver initialization failed: {e}\")\nE               Failed: Chrome driver initialization failed: Message: Unable to obtain driver for chrome using Selenium Manager.; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\nconftest.py:109: Failed"}, "attachments": [{"name": "log", "source": "31c7a204-cba8-4d8d-8dad-0591f47968f5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "c4086c7b-f470-4065-8b90-35fc8308c941-attachment.txt", "type": "text/plain"}], "start": 1723096320792, "stop": 1723096320792, "uuid": "c4e8fe12-cdf6-4cfb-be15-4d2e86b0c5af", "historyId": "86b1e9db321c90658f175e0a246d262f", "testCaseId": "86b1e9db321c90658f175e0a246d262f", "fullName": "tests.candidate_test.login_test#test_login", "labels": [{"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-CDJ5FU7"}, {"name": "thread", "value": "8876-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.login_test"}]}