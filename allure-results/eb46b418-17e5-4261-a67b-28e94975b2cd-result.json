{"name": "test_jobs_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached: received Inspector.detached event\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=132.0.6834.196)\nStacktrace:\n\tGetHandleVerifier [0x00E774A3+25091]\n\t(No symbol) [0x00DFDC04]\n\t(No symbol) [0x00CDB373]\n\t(No symbol) [0x00CCDEE8]\n\t(No symbol) [0x00CCD107]\n\t(No symbol) [0x00CCCC6B]\n\t(No symbol) [0x00CCC981]\n\t(No symbol) [0x00CCBAE9]\n\t(No symbol) [0x00CE6901]\n\t(No symbol) [0x00D5B826]\n\t(No symbol) [0x00D41CA6]\n\t(No symbol) [0x00D131D5]\n\t(No symbol) [0x00D1435D]\n\tGetHandleVerifier [0x011707C3+3142947]\n\tGetHandleVerifier [0x01181A2B+3213195]\n\tGetHandleVerifier [0x0117C412+3191154]\n\tGetHandleVerifier [0x00F18720+685184]\n\t(No symbol) [0x00E06E1D]\n\t(No symbol) [0x00E03E18]\n\t(No symbol) [0x00E03FB6]\n\t(No symbol) [0x00DF66F0]\n\tBaseThreadInitThunk [0x7610FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3b2c47439b5bd277f6a36e834d35381d\")>\n\n    @pytest.fixture(scope=\"module\")\n    def authenticated_user(env, driver):\n        \"\"\"Fixture to handle login and return the initial dashboard state.\"\"\"\n        login = Login(driver)\n        # Open the login page\n>       login.get(env)\n\nconftest.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages_Candidate\\base_page_candidate.py:20: in get\n    self.driver.get(url)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026F6D225A00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached: received Inspect...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached: received Inspector.detached event\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=132.0.6834.196)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00E774A3+25091]\nE       \t(No symbol) [0x00DFDC04]\nE       \t(No symbol) [0x00CDB373]\nE       \t(No symbol) [0x00CCDEE8]\nE       \t(No symbol) [0x00CCD107]\nE       \t(No symbol) [0x00CCCC6B]\nE       \t(No symbol) [0x00CCC981]\nE       \t(No symbol) [0x00CCBAE9]\nE       \t(No symbol) [0x00CE6901]\nE       \t(No symbol) [0x00D5B826]\nE       \t(No symbol) [0x00D41CA6]\nE       \t(No symbol) [0x00D131D5]\nE       \t(No symbol) [0x00D1435D]\nE       \tGetHandleVerifier [0x011707C3+3142947]\nE       \tGetHandleVerifier [0x01181A2B+3213195]\nE       \tGetHandleVerifier [0x0117C412+3191154]\nE       \tGetHandleVerifier [0x00F18720+685184]\nE       \t(No symbol) [0x00E06E1D]\nE       \t(No symbol) [0x00E03E18]\nE       \t(No symbol) [0x00E03FB6]\nE       \t(No symbol) [0x00DF66F0]\nE       \tBaseThreadInitThunk [0x7610FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "attachments": [{"name": "log", "source": "e0e40e5e-fe3f-4aa2-8d48-048214d30879-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e5af8555-9ef1-460f-946c-9c334ad72da0-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "32c09164-0dac-4123-bb0c-e0343114da05-attachment.txt", "type": "text/plain"}], "start": 1739270107335, "stop": 1739270107335, "uuid": "fd6a1017-ded7-4d63-8c64-9f881bfadaa9", "historyId": "f3480c03aab544bdce54dce0e9ba0ecc", "testCaseId": "f3480c03aab544bdce54dce0e9ba0ecc", "fullName": "tests.recruiter_test.Assessments_test#test_jobs_page", "labels": [{"name": "tag", "value": "assessments_page"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Assessments_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "16888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Assessments_test"}]}