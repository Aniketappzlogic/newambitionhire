{"name": "test_jobs_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=132.0.6834.111); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x010574A3+25091]\n\t(No symbol) [0x00FDDC04]\n\t(No symbol) [0x00EBB373]\n\t(No symbol) [0x00EC0C3D]\n\t(No symbol) [0x00EC2CBA]\n\t(No symbol) [0x00EC2D37]\n\t(No symbol) [0x00F00EF2]\n\t(No symbol) [0x00F000F0]\n\t(No symbol) [0x00EF5688]\n\t(No symbol) [0x00F21F0C]\n\t(No symbol) [0x00EF4E44]\n\t(No symbol) [0x00F221A4]\n\t(No symbol) [0x00F3B49E]\n\t(No symbol) [0x00F21CA6]\n\t(No symbol) [0x00EF31D5]\n\t(No symbol) [0x00EF435D]\n\tGetHandleVerifier [0x013507C3+3142947]\n\tGetHandleVerifier [0x01361A2B+3213195]\n\tGetHandleVerifier [0x0135C412+3191154]\n\tGetHandleVerifier [0x010F8720+685184]\n\t(No symbol) [0x00FE6E1D]\n\t(No symbol) [0x00FE3E18]\n\t(No symbol) [0x00FE3FB6]\n\t(No symbol) [0x00FD66F0]\n\tBaseThreadInitThunk [0x7610FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f6be4cff010321813afb678cac22a645\")>, authenticated_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.jobs_page\n    def test_jobs_page(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiter_login = Loginrecruiter(driver)\n        recruiter_login.username_btn.send_keys('inderjeetkmcs@gmail.com')\n        recruiter_login.password_btn.send_keys('123')\n        logging.info(f\"Password entered\")\n    \n        # recruiter_login.hidepassword_btn.click()\n        # logging.info(f\"hide passwrd btn clicked\")\n    \n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n        )\n        recruiter_login.login_btn.click()\n        logging.info(f\"login btn clicked\")\n        #time.sleep(5)\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n        )\n    \n        jobs_page = Jobs(driver)\n        jobs_page.jobs_btn.click()\n        logging.info(f\"jobs btn clicked\")\n    \n    \n        activebtn = Jobs(driver)\n        activebtn.active_btn.click()\n        logging.info(f\"active btn clicked\")\n    \n        draftsbtn = Jobs(driver)\n        draftsbtn.drafts_btn.click()\n    \n        inactivebtn = Jobs(driver)\n        inactivebtn.inactive_btn.click()\n        logging.info(f\"inactive btn clicked\")\n    \n        sortby_btn = Jobs(driver)\n        sortby_btn.Sortby.click()\n    \n        last2week = Jobs(driver)\n        last2week.last2week.click()\n    \n        searchtab = Jobs(driver)\n        searchtab.search_tab.send_keys('3rd July Testing')\n    \n        detailsbtn = Jobs(driver)\n        detailsbtn.details_btn.click()\n    \n        candidatesbtn = Jobs(driver)\n        candidatesbtn.candidates_btn.click()\n    \n        # candidatecheckbox = Jobs(driver)\n        # candidatecheckbox.candidates_checkbox.click()\n    \n        Settings = Jobs(driver)\n        Settings.Settings_btn.click()\n    \n        jobworkflow = Jobs(driver)\n        jobworkflow.Job_Workflow_btn.click()\n    \n        Proctoringbtn = Jobs(driver)\n        Proctoringbtn.Proctoring_btn.click()\n    \n        Cut_off = Jobs(driver)\n        Cut_off.Cutoff.click()\n    \n        Applicationform = Jobs(driver)\n        Applicationform.Application_Form.click()\n    \n        Languagebtn = Jobs(driver)\n        Languagebtn.Language_btn.click()\n    \n        Savebtn = Jobs(driver)\n>       Savebtn.Save_btn.click()\n\ntests\\recruiter_test\\Jobs_test.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\base_elements.py:77: in click\n    element.click()\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000192331DA450>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=132.0.6834.111); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010574A3+25091]\nE       \t(No symbol) [0x00FDDC04]\nE       \t(No symbol) [0x00EBB373]\nE       \t(No symbol) [0x00EC0C3D]\nE       \t(No symbol) [0x00EC2CBA]\nE       \t(No symbol) [0x00EC2D37]\nE       \t(No symbol) [0x00F00EF2]\nE       \t(No symbol) [0x00F000F0]\nE       \t(No symbol) [0x00EF5688]\nE       \t(No symbol) [0x00F21F0C]\nE       \t(No symbol) [0x00EF4E44]\nE       \t(No symbol) [0x00F221A4]\nE       \t(No symbol) [0x00F3B49E]\nE       \t(No symbol) [0x00F21CA6]\nE       \t(No symbol) [0x00EF31D5]\nE       \t(No symbol) [0x00EF435D]\nE       \tGetHandleVerifier [0x013507C3+3142947]\nE       \tGetHandleVerifier [0x01361A2B+3213195]\nE       \tGetHandleVerifier [0x0135C412+3191154]\nE       \tGetHandleVerifier [0x010F8720+685184]\nE       \t(No symbol) [0x00FE6E1D]\nE       \t(No symbol) [0x00FE3E18]\nE       \t(No symbol) [0x00FE3FB6]\nE       \t(No symbol) [0x00FD66F0]\nE       \tBaseThreadInitThunk [0x7610FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7745806E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "5ae17a69-6d3f-48e6-b496-5d2b20ed1d20-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "6aba5c5c-6620-4f9c-bce4-e96a6433b8b6-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "952e2eee-9850-47c4-974d-69c366a01350-attachment.txt", "type": "text/plain"}], "start": 1738127661676, "stop": 1738127673788, "uuid": "289d94d1-ea18-44e9-b331-be323c14f0f5", "historyId": "9052ef2b0d9e76791ffa006f9a881f25", "testCaseId": "9052ef2b0d9e76791ffa006f9a881f25", "fullName": "tests.recruiter_test.Jobs_test#test_jobs_page", "labels": [{"name": "tag", "value": "jobs_page"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Jobs_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "248-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Jobs_test"}]}