{"name": "test_jobs_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"55d652e82ea6be57c660ffe481090648\")>, authenticated_user = None\n\n    @pytest.mark.regression\n    @pytest.mark.assessments_page\n    def test_jobs_page(env, driver, authenticated_user):\n        logging.info(f\"Running test for environment: {env}\")\n    \n        # Login with predefined credentials\n        login = authenticated_user\n        recruiter_login = Loginrecruiter(driver)\n        recruiter_login.username_btn.send_keys('inderjeetkmcs@gmail.com')\n        recruiter_login.password_btn.send_keys('123')\n        logging.info(\"Password entered\")\n    \n        # Click the login button after waiting for it to be clickable\n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.XPATH, \"//span[contains(text(), 'Login')]\"))\n        )\n        recruiter_login.login_btn.click()\n        logging.info(\"Login button clicked\")\n    \n        # Wait for the page to load after login\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"(//h2[text()='Private Jobs'])\"))\n        )\n    \n        # Navigate to the assessments page\n        assessment_page = Assessments(driver)\n        assessment_page.assessments_btn.click()\n        logging.info(\"Navigated to Assessments page\")\n        time.sleep(2)  # Wait for page to load\n    \n        # Access inactive jobs section\n        inactivejobs = Assessments(driver)\n        inactivejobs.inactive_btn.click()\n    \n        # Access draft jobs section\n        draftjobs = Assessments(driver)\n        draftjobs.drafts_btn.click()\n        time.sleep(2)\n    \n        # Search for a specific job\n        searchtab = Assessments(driver)\n        searchtab.search_tab.send_keys('Automated 1002')\n    \n        # Select the job from search results\n        selectjob = Assessments(driver)\n        selectjob.select_job.click()\n    \n        # Create a new assessment\n        CreateNewAssessment = Assessments(driver)\n        CreateNewAssessment.Create_New_Assessment.click()\n        time.sleep(4)\n    \n        # ////////////////// CTQ Section ///////////////////\n        # (Comment out this section if CTQ is not selected for assessment)\n    \n        # Add CTQ section and its details\n        AddCTQ = Assessments(driver)\n        AddCTQ.Add_CTQ.click()\n    \n        CTQname = Assessments(driver)\n        CTQname.CTQ_name.send_keys('CTQ')\n    \n        CTQduration = Assessments(driver)\n        CTQduration.CTQ_duration.send_keys(10)\n    \n        CTQcutoff = Assessments(driver)\n        CTQcutoff.CTQ_cutoff.click()\n    \n        CutoffValue = Assessments(driver)\n        CutoffValue.Cutoff_value.click()\n    \n        CTQinstructions = Assessments(driver)\n        CTQinstructions.CTQ_instructions.click()\n    \n        CTQques = Assessments(driver)\n        CTQques.CTQ_questions.click()\n    \n        # ////////////////// Add Custom Questions //////////////////\n        # Adding free-text questions\n        ques_to_send = [\n            \"What is your name?\",\n            \"What is your current Location?\",\n            \"Do you have a passport?\",\n            \"Do you know Python?\"\n        ]\n    \n        for question in ques_to_send:\n            AddCustomQues = Assessments(driver)\n            AddCustomQues.Add_Custom_questions.click()\n    \n            CustomQuesField = Assessments(driver)\n            CustomQuesField.Custom_question_field.send_keys(question)\n    \n            FreeTextToggle = Assessments(driver)\n            FreeTextToggle.FreeText_Toggle.click()\n    \n            SaveButton = Assessments(driver)\n            SaveButton.Save_button.click()\n    \n        # Adding custom questions (non-free-text)\n        for question in ques_to_send[:2]:\n            AddCustomQues = Assessments(driver)\n            AddCustomQues.Add_Custom_questions.click()\n    \n            CustomQuesField = Assessments(driver)\n            CustomQuesField.Custom_question_field.send_keys(question)\n    \n            SaveButton = Assessments(driver)\n            SaveButton.Save_button.click()\n    \n        # Add questions from the CTQ library\n        CTQLibQues = Assessments(driver)\n        CTQLibQues.questions.click()\n        CTQLibQues.questions2.click()\n    \n        # Save the CTQ changes\n        SaveChanges = Assessments(driver)\n        SaveChanges.CTQ_SaveChanges.click()\n    \n        # ////////////////// Functional Assessment //////////////////\n        # (Comment out this section if functional assessment is not selected for assessment)\n    \n        searchtab = Assessments(driver)\n        searchtab.search_tab.send_keys('Automated 1002')  # Adjust job name if needed\n    \n        # Select job and create a new assessment\n        selectjob = Assessments(driver)\n        selectjob.select_job.click()\n    \n        CreateNewAssessment = Assessments(driver)\n        CreateNewAssessment.Create_New_Assessment.click()\n        time.sleep(4)\n    \n        # Add functional assessment details\n        AddFunctional = Assessments(driver)\n        AddFunctional.Add_Functional.click()\n    \n        FunctionalName = Assessments(driver)\n        FunctionalName.Functional_name.send_keys('Functional')\n    \n        FunctionalCutoff = Assessments(driver)\n        FunctionalCutoff.Functional_cutoff.click()\n    \n        FuncCutoffvalue = Assessments(driver)\n        FuncCutoffvalue.Func_Cutoff_value.click()\n    \n        # Proceed to the next step\n        SaveandNext = Assessments(driver)\n        SaveandNext.Save_Next.click()\n        logger.info(\"Save and Next clicked\")\n    \n        # Add functional modules to the assessment\n        FuncModules = Assessments(driver)\n        FuncModules.Func_Modules.click()\n        logger.info(\"Modules clicked\")\n    \n        # Wait for modules to load\n        WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.XPATH, \"//body/div/div/div/div/div[5]/div[1]\"))\n        )\n    \n        # Search and add modules (Mathematical Ability)\n        SearchModules = Assessments(driver)\n        SearchModules.Func_Search_Modules.send_keys('Mathematical Ability')\n    \n        AddModule = Assessments(driver)\n        AddModule.Add_Module.click()\n    \n        # Select various difficulty levels for questions\n        EasyQues = Assessments(driver)\n        EasyQues.Maths_Easy_Ques.click()\n    \n        Ques = Assessments(driver)\n        Ques.Ques_1.click()\n        Ques.Ques_2.click()\n        Ques.Ques_3.click()\n    \n        MediumQues = Assessments(driver)\n        MediumQues.Maths_Medium_Ques.click()\n    \n        MedQues = Assessments(driver)\n        MedQues.Med_Ques_1.click()\n>       MedQues.Med_Ques_2.click()\n\ntests\\recruiter_test\\Assessments_test.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPage_Recruiter\\Assessments_page.py:223: in Med_Ques_2\n    return BaseElement(driver=self.driver, locator=locator)\nutils\\base_elements.py:43: in __init__\n    self.find()\nutils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"55d652e82ea6be57c660ffe481090648\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x0000023DAA71DA80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "log", "source": "96939cc1-ec18-447e-8097-e4bfe8d835a6-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "6c66b632-3f8e-4fe7-9142-c0ec31d65640-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "a2a26353-c739-49f8-a56a-6383feef6503-attachment.txt", "type": "text/plain"}], "start": 1739276789427, "stop": 1739276849750, "uuid": "f599b064-c882-444f-b5a4-333fed0069a5", "historyId": "f3480c03aab544bdce54dce0e9ba0ecc", "testCaseId": "f3480c03aab544bdce54dce0e9ba0ecc", "fullName": "tests.recruiter_test.Assessments_test#test_jobs_page", "labels": [{"name": "tag", "value": "assessments_page"}, {"name": "tag", "value": "regression"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "Assessments_test"}, {"name": "host", "value": "DESKTOP-HRHMBRL"}, {"name": "thread", "value": "27104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.Assessments_test"}]}