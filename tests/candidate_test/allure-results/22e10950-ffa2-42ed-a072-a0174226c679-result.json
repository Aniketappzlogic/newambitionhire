{"name": "test_start_training_module", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <video data-v-86654a8b=\"\" controls=\"\" controlslist=\"nodownload noremoteplayback noplaybackrate\" width=\"800\" src=\"https://ambitionhire-metadata-development.s3.amazonaws.com/videoplayback_3f1725df-0770-4775-9644-e0ffa2546ffe.mp4\"></video> is not clickable at point (640, 317). Other element would receive the click: <div data-v-86654a8b=\"\" class=\"fixed z-50 inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\">...</div>\n  (Session info: chrome=128.0.6613.138)\nStacktrace:\n\tGetHandleVerifier [0x009FD933+25811]\n\t(No symbol) [0x0098E314]\n\t(No symbol) [0x00882523]\n\t(No symbol) [0x008CD397]\n\t(No symbol) [0x008CB799]\n\t(No symbol) [0x008C967B]\n\t(No symbol) [0x008C8C7B]\n\t(No symbol) [0x008BD9DF]\n\t(No symbol) [0x008EAD2C]\n\t(No symbol) [0x008BD475]\n\t(No symbol) [0x008EAFC4]\n\t(No symbol) [0x009046F0]\n\t(No symbol) [0x008EAAC6]\n\t(No symbol) [0x008BBEFD]\n\t(No symbol) [0x008BC8FD]\n\tGetHandleVerifier [0x00CCF143+2981091]\n\tGetHandleVerifier [0x00D22FF9+3324825]\n\tGetHandleVerifier [0x00A8B32F+605903]\n\tGetHandleVerifier [0x00A92CBC+637020]\n\t(No symbol) [0x00996F4D]\n\t(No symbol) [0x00993DD8]\n\t(No symbol) [0x00993F75]\n\t(No symbol) [0x00986406]\n\tBaseThreadInitThunk [0x75F8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"852b786d684ab62acbc39219ad87b4f2\")>, authenticated_user = None\n\n    @pytest.mark.start_training_module\n    def test_start_training_module(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        Pagelogin = Login(driver)\n        time.sleep(3)\n        Pagelogin.phonenumber_btn.send_keys('7503078450')\n        Pagelogin.sendotp_btn.click()\n        time.sleep(5)\n        Pagelogin.Sendingotp_text.send_keys('000000')\n        Pagelogin.submitotp_btn.click()\n        time.sleep(7)\n        trainingmodule = TrainingModule(driver)\n        trainingmodule.training_module_tab.click()\n        time.sleep(4)\n        trainingmodule.select_training_module.click()\n        time.sleep(5)\n        trainingmodule.start_course.click()\n        time.sleep(2)\n>       trainingmodule.playvideo.click()\n\ntraining_module_test.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\utils\\base_elements.py:77: in click\n    element.click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028949EF7C20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <video data-v-86654a8b=\"\" controls=\"\" controlslist=\"nodownload noremoteplayback noplaybackrate\" width=\"800\" src=\"https://ambitionhire-metadata-development.s3.amazonaws.com/videoplayback_3f1725df-0770-4775-9644-e0ffa2546ffe.mp4\"></video> is not clickable at point (640, 317). Other element would receive the click: <div data-v-86654a8b=\"\" class=\"fixed z-50 inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\">...</div>\nE         (Session info: chrome=128.0.6613.138)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x009FD933+25811]\nE       \t(No symbol) [0x0098E314]\nE       \t(No symbol) [0x00882523]\nE       \t(No symbol) [0x008CD397]\nE       \t(No symbol) [0x008CB799]\nE       \t(No symbol) [0x008C967B]\nE       \t(No symbol) [0x008C8C7B]\nE       \t(No symbol) [0x008BD9DF]\nE       \t(No symbol) [0x008EAD2C]\nE       \t(No symbol) [0x008BD475]\nE       \t(No symbol) [0x008EAFC4]\nE       \t(No symbol) [0x009046F0]\nE       \t(No symbol) [0x008EAAC6]\nE       \t(No symbol) [0x008BBEFD]\nE       \t(No symbol) [0x008BC8FD]\nE       \tGetHandleVerifier [0x00CCF143+2981091]\nE       \tGetHandleVerifier [0x00D22FF9+3324825]\nE       \tGetHandleVerifier [0x00A8B32F+605903]\nE       \tGetHandleVerifier [0x00A92CBC+637020]\nE       \t(No symbol) [0x00996F4D]\nE       \t(No symbol) [0x00993DD8]\nE       \t(No symbol) [0x00993F75]\nE       \t(No symbol) [0x00986406]\nE       \tBaseThreadInitThunk [0x75F8FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "777bf170-f2a4-457e-8a2a-2979bb7bd06e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "8512e476-d51d-4e90-ae36-aaf7f1dee8e2-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "c740f8e0-06f8-4f14-b918-b661fc1f2b49-attachment.txt", "type": "text/plain"}], "start": 1726743072899, "stop": 1726743101381, "uuid": "2fbabeb7-5510-44a5-849b-84183dd1867c", "historyId": "2a6e329f9d40dab02967493fc929e02d", "testCaseId": "2a6e329f9d40dab02967493fc929e02d", "fullName": "tests.candidate_test.training_module_test#test_start_training_module", "labels": [{"name": "tag", "value": "start_training_module"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "training_module_test"}, {"name": "host", "value": "DESKTOP-4M0N7KL"}, {"name": "thread", "value": "32464-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.training_module_test"}]}