{"name": "test_view_pdftraining_module", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression //svg[@xmlns='http://www.w3.org/2000/svg' and @xmlns:xlink='http://www.w3.org/1999/xlink'] because of the following error:\\nNamespaceError: Failed to execute 'evaluate' on 'Document': The string '//svg[@xmlns='http://www.w3.org/2000/svg' and @xmlns:xlink='http://www.w3.org/1999/xlink']' contains unresolvable namespaces.\"}\n  (Session info: chrome=128.0.6613.138); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00BED933+25811]\n\t(No symbol) [0x00B7E314]\n\t(No symbol) [0x00A72523]\n\t(No symbol) [0x00A780A4]\n\t(No symbol) [0x00A79988]\n\t(No symbol) [0x00A79A00]\n\t(No symbol) [0x00AB70F5]\n\t(No symbol) [0x00AB765B]\n\t(No symbol) [0x00AF6BA2]\n\t(No symbol) [0x00ADAD74]\n\t(No symbol) [0x00AF46F0]\n\t(No symbol) [0x00ADAAC6]\n\t(No symbol) [0x00AABEFD]\n\t(No symbol) [0x00AAC8FD]\n\tGetHandleVerifier [0x00EBF143+2981091]\n\tGetHandleVerifier [0x00F12FF9+3324825]\n\tGetHandleVerifier [0x00C7B32F+605903]\n\tGetHandleVerifier [0x00C82CBC+637020]\n\t(No symbol) [0x00B86F4D]\n\t(No symbol) [0x00B83DD8]\n\t(No symbol) [0x00B83F75]\n\t(No symbol) [0x00B76406]\n\tBaseThreadInitThunk [0x75F8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1af9c04f5caf655c32cef527f1ab5f5a\")>, authenticated_user = None\n\n    @pytest.mark.view_pdftraining_module\n    def test_view_pdftraining_module(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        Pagelogin = Login(driver)\n        time.sleep(3)\n        Pagelogin.phonenumber_btn.send_keys('7503078450')\n        Pagelogin.sendotp_btn.click()\n        time.sleep(5)\n        Pagelogin.Sendingotp_text.send_keys('000000')\n        Pagelogin.submitotp_btn.click()\n        time.sleep(7)\n        trainingmodule = TrainingModule(driver)\n        trainingmodule.training_module_tab.click()\n        time.sleep(4)\n        trainingmodule.select_training_module.click()\n        time.sleep(5)\n        trainingmodule.start_course.click()\n        time.sleep(5)\n        # iframe=driver.find_element(By.XPATH,\"//iframe[@title='Office on the web Frame']\")\n        # driver.switch_to.frame(iframe)\n>       pdf_view= driver.find_element(By.XPATH,\"//svg[@xmlns='http://www.w3.org/2000/svg' and @xmlns:xlink='http://www.w3.org/1999/xlink']\")\n\ntraining_module_test.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E626FF6930>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression //svg[@xmlns='http://www.w3.org/2000/svg' and @xmlns:xlink='http://www.w3.org/1999/xlink'] because of the following error:\\nNamespaceError: Failed to execute 'evaluate' on 'Document': The string '//svg[@xmlns='http://www.w3.org/2000/svg' and @xmlns:xlink='http://www.w3.org/1999/xlink']' contains unresolvable namespaces.\"}\nE         (Session info: chrome=128.0.6613.138); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00BED933+25811]\nE       \t(No symbol) [0x00B7E314]\nE       \t(No symbol) [0x00A72523]\nE       \t(No symbol) [0x00A780A4]\nE       \t(No symbol) [0x00A79988]\nE       \t(No symbol) [0x00A79A00]\nE       \t(No symbol) [0x00AB70F5]\nE       \t(No symbol) [0x00AB765B]\nE       \t(No symbol) [0x00AF6BA2]\nE       \t(No symbol) [0x00ADAD74]\nE       \t(No symbol) [0x00AF46F0]\nE       \t(No symbol) [0x00ADAAC6]\nE       \t(No symbol) [0x00AABEFD]\nE       \t(No symbol) [0x00AAC8FD]\nE       \tGetHandleVerifier [0x00EBF143+2981091]\nE       \tGetHandleVerifier [0x00F12FF9+3324825]\nE       \tGetHandleVerifier [0x00C7B32F+605903]\nE       \tGetHandleVerifier [0x00C82CBC+637020]\nE       \t(No symbol) [0x00B86F4D]\nE       \t(No symbol) [0x00B83DD8]\nE       \t(No symbol) [0x00B83F75]\nE       \t(No symbol) [0x00B76406]\nE       \tBaseThreadInitThunk [0x75F8FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "attachments": [{"name": "log", "source": "0af91b53-ffb3-4469-8236-7c2fdcf0c1b3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "cfb58cf6-5003-46ed-af39-a561b08b4df5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "db9a038f-8e43-479b-9fff-c91d495c57e3-attachment.txt", "type": "text/plain"}], "start": 1727415748446, "stop": 1727415779054, "uuid": "38e3c511-645b-41ea-a001-c617ba1916db", "historyId": "6754423f2464973c6bce135376ad7015", "testCaseId": "6754423f2464973c6bce135376ad7015", "fullName": "tests.candidate_test.training_module_test#test_view_pdftraining_module", "labels": [{"name": "tag", "value": "view_pdftraining_module"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "training_module_test"}, {"name": "host", "value": "DESKTOP-4M0N7KL"}, {"name": "thread", "value": "10872-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.training_module_test"}]}