{"name": "test_view_pdf", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-7d8d8b6b=\"\">...</span> is not clickable at point (878, 506). Other element would receive the click: <div data-v-7d8d8b6b=\"\" class=\"fixed z-50 inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\">...</div>\n  (Session info: chrome=129.0.6668.90)\nStacktrace:\n\tGetHandleVerifier [0x011F5523+24195]\n\t(No symbol) [0x0118AA04]\n\t(No symbol) [0x01082093]\n\t(No symbol) [0x010CCE37]\n\t(No symbol) [0x010CB239]\n\t(No symbol) [0x010C911B]\n\t(No symbol) [0x010C8724]\n\t(No symbol) [0x010BD4FD]\n\t(No symbol) [0x010EAB3C]\n\t(No symbol) [0x010BCFB4]\n\t(No symbol) [0x010EADD4]\n\t(No symbol) [0x01105280]\n\t(No symbol) [0x010EA8D6]\n\t(No symbol) [0x010BBA27]\n\t(No symbol) [0x010BC43D]\n\tGetHandleVerifier [0x014BCE13+2938739]\n\tGetHandleVerifier [0x0150EC69+3274185]\n\tGetHandleVerifier [0x012809C2+594722]\n\tGetHandleVerifier [0x01287EDC+624700]\n\t(No symbol) [0x011937CD]\n\t(No symbol) [0x01190528]\n\t(No symbol) [0x011906C5]\n\t(No symbol) [0x01182CA6]\n\tBaseThreadInitThunk [0x75F8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]", "trace": "env = 'dev', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"66db1aedceaed9dfe4acbb42cd019f60\")>, authenticated_user = None\n\n    @pytest.mark.view_pdf\n    def test_view_pdf(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        Pagelogin = Login(driver)\n        time.sleep(3)\n        Pagelogin.phonenumber_btn.send_keys('7503078450')\n        Pagelogin.sendotp_btn.click()\n        time.sleep(5)\n        Pagelogin.Sendingotp_text.send_keys('000000')\n        Pagelogin.submitotp_btn.click()\n        time.sleep(7)\n        trainingmodule = TrainingModule(driver)\n        trainingmodule.training_module_tab.click()\n        time.sleep(4)\n        trainingmodule.select_training_module.click()\n        time.sleep(5)\n>       trainingmodule.start_course.click()\n\ntraining_module_test.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\utils\\base_elements.py:77: in click\n    element.click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000019A3E2C56A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-7d8d8b6b=\"\">...</span> is not clickable at point (878, 506). Other element would receive the click: <div data-v-7d8d8b6b=\"\" class=\"fixed z-50 inset-0 bg-gray-300 opacity-50 flex justify-center items-center h-screen\">...</div>\nE         (Session info: chrome=129.0.6668.90)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x011F5523+24195]\nE       \t(No symbol) [0x0118AA04]\nE       \t(No symbol) [0x01082093]\nE       \t(No symbol) [0x010CCE37]\nE       \t(No symbol) [0x010CB239]\nE       \t(No symbol) [0x010C911B]\nE       \t(No symbol) [0x010C8724]\nE       \t(No symbol) [0x010BD4FD]\nE       \t(No symbol) [0x010EAB3C]\nE       \t(No symbol) [0x010BCFB4]\nE       \t(No symbol) [0x010EADD4]\nE       \t(No symbol) [0x01105280]\nE       \t(No symbol) [0x010EA8D6]\nE       \t(No symbol) [0x010BBA27]\nE       \t(No symbol) [0x010BC43D]\nE       \tGetHandleVerifier [0x014BCE13+2938739]\nE       \tGetHandleVerifier [0x0150EC69+3274185]\nE       \tGetHandleVerifier [0x012809C2+594722]\nE       \tGetHandleVerifier [0x01287EDC+624700]\nE       \t(No symbol) [0x011937CD]\nE       \t(No symbol) [0x01190528]\nE       \t(No symbol) [0x011906C5]\nE       \t(No symbol) [0x01182CA6]\nE       \tBaseThreadInitThunk [0x75F8FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "ed526fe1-6f93-4441-9533-b531718e4023-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "6fac6ded-6469-445d-860d-9e389bd95974-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "f53d477f-0e9d-4b8c-9f48-a1f5c121f19c-attachment.txt", "type": "text/plain"}], "start": 1729156230311, "stop": 1729156256013, "uuid": "7f50da72-a181-44c8-8e0b-2cb0246806ca", "historyId": "e3854bf5ad516b90d278ef3029818be3", "testCaseId": "e3854bf5ad516b90d278ef3029818be3", "fullName": "tests.candidate_test.training_module_test#test_view_pdf", "labels": [{"name": "tag", "value": "view_pdf"}, {"name": "parentSuite", "value": "tests.candidate_test"}, {"name": "suite", "value": "training_module_test"}, {"name": "host", "value": "DESKTOP-4M0N7KL"}, {"name": "thread", "value": "18712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.candidate_test.training_module_test"}]}