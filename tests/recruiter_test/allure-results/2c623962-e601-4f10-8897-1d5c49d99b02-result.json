{"name": "test_login_recruiter", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nfrom javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression (//input[@placeholder='Email'] because of the following error:\\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '(//input[@placeholder='Email']' is not a valid XPath expression.\"}\n  (Session info: chrome=130.0.6723.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nStacktrace:\n\tGetHandleVerifier [0x00B6EBD3+24307]\n\t(No symbol) [0x00AF8D74]\n\t(No symbol) [0x009DC323]\n\t(No symbol) [0x009E1DA0]\n\t(No symbol) [0x009E3628]\n\t(No symbol) [0x009E36A0]\n\t(No symbol) [0x00A1D899]\n\t(No symbol) [0x00A1DECB]\n\t(No symbol) [0x00A5B9F2]\n\t(No symbol) [0x00A3FED4]\n\t(No symbol) [0x00A59579]\n\t(No symbol) [0x00A3FC26]\n\t(No symbol) [0x00A1219C]\n\t(No symbol) [0x00A1311D]\n\tGetHandleVerifier [0x00E18D93+2818227]\n\tGetHandleVerifier [0x00E7542E+3196750]\n\tGetHandleVerifier [0x00E6D9D2+3165426]\n\tGetHandleVerifier [0x00C0DA70+675216]\n\t(No symbol) [0x00B01B3D]\n\t(No symbol) [0x00AFEA18]\n\t(No symbol) [0x00AFEBB5]\n\t(No symbol) [0x00AF1640]\n\tBaseThreadInitThunk [0x75F8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"586ae7ed27bec3e7ef42c6d154e4be83\")>, authenticated_user = None\n\n    @pytest.mark.login_recruiter\n    def test_login_recruiter(env, driver, authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiterlogin = Loginrecruiter(driver)\n>       recruiterlogin.username_btn.send_keys('inderjeetkmcs@gmail.com')\n\nlogin_test.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\Page_Recruiter\\login.py:11: in username_btn\n    return BaseElement(driver=self.driver, locator=locator)\n..\\..\\utils\\base_elements.py:43: in __init__\n    self.find()\n..\\..\\utils\\base_elements.py:49: in find\n    element = WebDriverWait(self.driver, 30).until(EC.visibility_of_element_located(locator=self.locator))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C0656572C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression (//input[@placeholder='Email'] because of the following error:\\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '(//input[@placeholder='Email']' is not a valid XPath expression.\"}\nE         (Session info: chrome=130.0.6723.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B6EBD3+24307]\nE       \t(No symbol) [0x00AF8D74]\nE       \t(No symbol) [0x009DC323]\nE       \t(No symbol) [0x009E1DA0]\nE       \t(No symbol) [0x009E3628]\nE       \t(No symbol) [0x009E36A0]\nE       \t(No symbol) [0x00A1D899]\nE       \t(No symbol) [0x00A1DECB]\nE       \t(No symbol) [0x00A5B9F2]\nE       \t(No symbol) [0x00A3FED4]\nE       \t(No symbol) [0x00A59579]\nE       \t(No symbol) [0x00A3FC26]\nE       \t(No symbol) [0x00A1219C]\nE       \t(No symbol) [0x00A1311D]\nE       \tGetHandleVerifier [0x00E18D93+2818227]\nE       \tGetHandleVerifier [0x00E7542E+3196750]\nE       \tGetHandleVerifier [0x00E6D9D2+3165426]\nE       \tGetHandleVerifier [0x00C0DA70+675216]\nE       \t(No symbol) [0x00B01B3D]\nE       \t(No symbol) [0x00AFEA18]\nE       \t(No symbol) [0x00AFEBB5]\nE       \t(No symbol) [0x00AF1640]\nE       \tBaseThreadInitThunk [0x75F8FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException"}, "attachments": [{"name": "log", "source": "c4134207-2ed0-4378-9cce-84c5a7a8e937-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "543f4a56-8dec-4bec-8c4d-a52e2723a3a0-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "0aa11463-c40e-4b34-9934-d2f98e120d67-attachment.txt", "type": "text/plain"}], "start": 1732100088465, "stop": 1732100088487, "uuid": "31145ee2-c83e-4c7d-8e24-056e5df37ee6", "historyId": "0997aa77555ca41bce5985f7e54205f5", "testCaseId": "0997aa77555ca41bce5985f7e54205f5", "fullName": "tests.recruiter_test.login_test#test_login_recruiter", "labels": [{"name": "tag", "value": "login_recruiter"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-4M0N7KL"}, {"name": "thread", "value": "7160-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.login_test"}]}