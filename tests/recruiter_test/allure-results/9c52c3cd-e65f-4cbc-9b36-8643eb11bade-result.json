{"name": "test_login_page_socialmedialinks", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=130.0.6723.92)\nStacktrace:\n\tGetHandleVerifier [0x0082EBD3+24307]\n\t(No symbol) [0x007B8D74]\n\t(No symbol) [0x0069C323]\n\t(No symbol) [0x0067E00B]\n\t(No symbol) [0x00705F6F]\n\t(No symbol) [0x00718EC9]\n\t(No symbol) [0x006FFC26]\n\t(No symbol) [0x006D219C]\n\t(No symbol) [0x006D311D]\n\tGetHandleVerifier [0x00AD8D93+2818227]\n\tGetHandleVerifier [0x00B3542E+3196750]\n\tGetHandleVerifier [0x00B2D9D2+3165426]\n\tGetHandleVerifier [0x008CDA70+675216]\n\t(No symbol) [0x007C1B3D]\n\t(No symbol) [0x007BEA18]\n\t(No symbol) [0x007BEBB5]\n\t(No symbol) [0x007B1640]\n\tBaseThreadInitThunk [0x75F8FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]", "trace": "env = 'services', driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"55d8e66b848cb0de8110c728cc100db5\")>, authenticated_user = None\n\n    @pytest.mark.login_page_socialmedialinks\n    def test_login_page_socialmedialinks(env, driver,authenticated_user):\n        logging.info(f\"environment -> {env}\")\n        login = authenticated_user\n        recruiterlogin = Loginrecruiter(driver)\n>       recruiterlogin.social_media_facebook_btn.clear()\n\nlogin_test.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\utils\\base_elements.py:207: in clear\n    while element.get_attribute(\"value\") != \"\":\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:178: in get_attribute\n    attribute_value = self.parent.execute_script(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:408: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A47C89FBC0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=130.0.6723.92)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0082EBD3+24307]\nE       \t(No symbol) [0x007B8D74]\nE       \t(No symbol) [0x0069C323]\nE       \t(No symbol) [0x0067E00B]\nE       \t(No symbol) [0x00705F6F]\nE       \t(No symbol) [0x00718EC9]\nE       \t(No symbol) [0x006FFC26]\nE       \t(No symbol) [0x006D219C]\nE       \t(No symbol) [0x006D311D]\nE       \tGetHandleVerifier [0x00AD8D93+2818227]\nE       \tGetHandleVerifier [0x00B3542E+3196750]\nE       \tGetHandleVerifier [0x00B2D9D2+3165426]\nE       \tGetHandleVerifier [0x008CDA70+675216]\nE       \t(No symbol) [0x007C1B3D]\nE       \t(No symbol) [0x007BEA18]\nE       \t(No symbol) [0x007BEBB5]\nE       \t(No symbol) [0x007B1640]\nE       \tBaseThreadInitThunk [0x75F8FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B67C3E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "107c9bba-6a0e-4c1e-9853-06c7bdc7757c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "c6599796-28f4-4d96-8e5b-8d863ec1179e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "056385dd-e2d3-4fb4-ae42-b025513ead05-attachment.txt", "type": "text/plain"}], "start": 1732624220578, "stop": 1732624344434, "uuid": "ae025215-160c-4490-8d2d-2f2e231f3f5b", "historyId": "3f9cecf74a7c1d8861e5e8b63e819b45", "testCaseId": "3f9cecf74a7c1d8861e5e8b63e819b45", "fullName": "tests.recruiter_test.login_test#test_login_page_socialmedialinks", "labels": [{"name": "tag", "value": "login_page_socialmedialinks"}, {"name": "parentSuite", "value": "tests.recruiter_test"}, {"name": "suite", "value": "login_test"}, {"name": "host", "value": "DESKTOP-4M0N7KL"}, {"name": "thread", "value": "18244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.recruiter_test.login_test"}]}